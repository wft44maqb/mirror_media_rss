<?xml version="1.0" encoding="UTF-8" standalone="no"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" version="2.0">

<channel>
	<title>亚马逊AWS官方博客</title>
	<atom:link href="https://aws.amazon.com/cn/blogs/china/feed/" rel="self" type="application/rss+xml"/>
	<link>https://aws.amazon.com/cn/blogs/china/</link>
	<description>Just another AWS Brew Blogs  site</description>
	<lastBuildDate>Wed, 08 Sep 2021 03:47:29 +0000</lastBuildDate>
	<language>zh-CN</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	
	<item>
		<title>专为构建者打造：AWS 和开放式 3D 引擎的故事 — 开发人员预览</title>
		<link>https://aws.amazon.com/cn/blogs/china/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview/</link>
				<pubDate>Wed, 08 Sep 2021 03:47:29 +0000</pubDate>
		<dc:creator><![CDATA[AWS Team]]></dc:creator>
				<category><![CDATA[Industries]]></category>
		<category><![CDATA[Amazon Lumberyard]]></category>
		<category><![CDATA[Amazon O3DE]]></category>

		<guid isPermaLink="false">abdd7308ae3dfe43ed919999f44f58c185ad5771</guid>
				<description>我们从游戏和模拟开发人员那里听说，他们想要更多的选项，以便在生产管道中进行协作、自定义和创造性控制。从头开始构建 3D 工具成本高昂，需要数年的开发时间，并需要大量的资源来维护。</description>
								<content:encoded>&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview10.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview10.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 我们从游戏和模拟开发人员那里听说，他们想要更多的选项，以便在生产管道中进行协作、自定义和创造性控制。从头开始构建 3D 工具成本高昂，需要数年的开发时间，并需要大量的资源来维护。这些开发人员最终要么将关键资金花费在重复做别人或者自己已经做过的事情上，要么只好使用难以定制的专有解决方案。&lt;/p&gt; 
&lt;p&gt;为了解决其中一些挑战，我们在 2016 年推出了 Lumberyard 游戏引擎。Lumberyard 提供了完全免费（无特许权使用费或席位许可证）、源代码可用的实时 3D 开发引擎，以便通过云集成进行快速构建、部署和扩展。过去 5 年中，我们不断地为客户改进产品。我们构建了功能强大的组件实体系统和备受欢迎的 Script Canvas 可视化脚本引擎。我们还收购了 Emotion FX 动画编辑器，创建了模块化 Gem 系统，并实施了许多 Twitch 和 AWS 集成。但有一件事从未改变，那就是我们的使命：为所有人提供世界一流的免费 3D 渲染工具。现在，我们要更进一步。&lt;/p&gt; 
&lt;h2&gt;开源之旅&lt;/h2&gt; 
&lt;p&gt;当开始构建 Lumberyard 的后继产品时，我们意识到我们可以做更多事情。如果最终目标是创新，则我们希望使游戏和模拟开发人员能够在开放的社群中与我们并肩合作，这样他们就可以访问技术，为技术做出贡献并推动技术发展。这就是 Linux Foundation &lt;a href="https://youtu.be/6ccjR9qI5YU"&gt;宣布成立 Open 3D Foundation&lt;/a&gt; 的原因，AWS 借助&lt;a href="https://docs.o3de.org/"&gt;开放式 3D 引擎&lt;/a&gt; (O3DE) 为该基金会提供支持。O3DE 是一款支持构建 AAA 级游戏的跨平台开源游戏引擎。作为开源社群的一部分，O3DE 可以提供开发人员实现实时 3D 环境所需的所有工具来扩展游戏和模拟的 3D 开发。该引擎在 Apache 2.0 许可证下授权使用，因此，任何人都可以构建和保留自己的智力资产，并选择回馈项目。&lt;/p&gt; 
&lt;p&gt;我们花了一年多时间来招募合作伙伴，这些合作伙伴拥有相应的资源和专业知识，最重要的是，他们有动力培养自维护社群。我们与 &lt;a href="https://www.linuxfoundation.org/"&gt;Linux Foundation&lt;/a&gt; 合作，将其作为我们值得信赖的专家开源组织机构，因为它是全球管理大型开源项目最好的机构之一。Linux Foundation 可以提供如此大规模开源项目所需的专家管理水平。我们很高兴能够得到众多合作伙伴的支持，他们与我们一样大力支持为游戏和模拟开发人员提供的选择。这些合作伙伴包括：Accelbyte、Adobe、Apocalypse Studios、Audiokinetic、Backtrace.io、Carbonated、Futurewei、GAMEPOCH、Genvid Technologies、Hadean、Huawei、HERE Technologies、Intel、International Game Developers Association、Kythera AI、Niantic、Open Robotics、PopcornFX、Red Hat、Rochester Institute of Technology、SideFX、Tafi、TLM Partners 和 Wargaming。与成熟的开源基金会合作还意味着打造平衡的生态系统，推动双方共同取得成功。这将产生飞轮效应，影响开源社群的方向和创新以及构建产品的合作伙伴和项目开发人员。最终，这种协作会推动更新的创新。这种模式让我们持续将工作重点放在客户对 Amazon 和 AWS 的期望上，包括大规模支持、云渲染、云中的工作室以及引擎本身的许多原生功能等创新。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview2.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview2.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;那么发生了什么变化？ 这是使用开源许可证的 Lumberyard 吗？&lt;/h3&gt; 
&lt;p&gt;简单来说，有很多变化！ 没错，它是开源引擎，根据宽松的 Apache 2.0 许可证授予许可。但是，O3DE 与之前的 Lumberyard 截然不同。我们在很大程度上依赖构建 Lumberyard 的经验，迭代和改进了 O3DE，以实现最终的协作和创造性控制。我们保留了客户最喜欢的 Lumberyard 相关部分，并对其余部分进行了重大修改。我们的目标是构建一款能够在开源环境中经受住时间考验的引擎。由于游戏引擎往往是整体式的，因此，我们在很大程度上倾向于构建具有可扩展性的模块化引擎，从一开始就采用开放标准工具。但是，我们仍然不满意，因此，我们添加了新预制系统、新构建系统、可扩展的 UI、许多新云功能、大量数学库优化、新网络功能以及许许多多的性能改进。此外，我们甚至添加了全新的 PBR 渲染器，它能够通过光线追踪和 GI 支持实现前向+ 和延迟渲染！&lt;/p&gt; 
&lt;h2&gt;模块化&lt;/h2&gt; 
&lt;p&gt;我们从头开始将该引擎重新设计为模块化引擎，因此，几乎所有引擎部件都是一个库。开发人员可以完全替换图形渲染器、音频子系统、编辑器、语言支持、网络堆栈、物理系统和其他库，而不影响其他库。核心引擎模块和任何附加组件或插件统称为“Gem”。开发人员可以通过引入 30 多种功能和工具中的任何一种（而不是引入所有功能和工具）来精简项目。他们也可以将这些功能和工具作为独立库来实施。如果开发人员已经拥有引擎并希望减少技术债务或更新代码，可以从开源项目中轻松选择所需的功能，然后将其实施到自己的技术堆栈中。他们也可以创建并合并自己的堆栈。借助 O3DE 的模块化架构添加新功能非常简单，这样开发人员就可以持续创新。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview3.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview3.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;开源友好型构建系统&lt;/h2&gt; 
&lt;p&gt;对于开发人员来说，模块化还必须易于理解并允许快速开发，因此，我们决定将整个构建系统移到开源 CMake 系统中。这一选择为各种 IDE（例如 Visual Studio、XCode 等）提供了更好的 CTest、插件库、分析、编辑并继续、快速代码生成及本机项目生成的支持。这种新方法通过适当的依赖关系树来构建所选的目标，并确保只重新构建实际的依赖关系，以便提高迭代开发的速度，进而节省时间。这种模块化特性还允许我们简化项目和 Gem 管理，方法是：删除所有二进制格式，然后将其移到可使用 CMake 编写脚本的人类可读的 JSON 文件。因此，只需简单地更改 JSON 文件中的某一行，即可在项目中添加或删除 Gem。通过博客&lt;a href="https://aws.amazon.com/blogs/gametech/lumberyard-build-system/"&gt;详细了解&lt;/a&gt; Lumberyard 构建系统的未来。&lt;/p&gt; 
&lt;h2&gt;引擎即 SDK&lt;/h2&gt; 
&lt;p&gt;Lumberyard 开发人员会发现引擎已经发生了很大的变化。它的构建类似于 SDK，因为对于引擎模块和 Gem，它可以以预编译的形式提供，这可被视为是一种“引擎即 SDK”方法。同样，在项目发生变化时，不需要重新编译预编译的库或 Gem。而且，当新引擎版本发布时，开发人员可以更新核心 Gem，只需解决项目代码本身的编译问题即可。工作室现在可以轻松自定义引擎组件，并根据需要用特定自定义模块替换预构建组件。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview4.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview4.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Atom 渲染器&lt;/h2&gt; 
&lt;p&gt;另一个重大变化是 Atom 渲染器，正如预期的那样，它作为 Gem 交付。该渲染器通过提供基于物理的现代渲染器 (PBR) 来支持多个平台，该渲染器符合 ACES 色彩空间标准并完全支持 Vulkan、Metal（开发中）和 DirectX 12 的光线追踪。Atom 随附全局光照 (GI) 和前向+ 渲染，开箱即用，并支持延迟渲染管道。与 O3DE 本身一样，Atom 具有模块化、可编写脚本和数据驱动等特点。我们甚至编写了一种全新的着色语言，称为 AZSL。这种语言利用 Atom 的数据驱动功能，因此，开发人员可以随着新硬件接口的出现不断创新。没错，Atom 是开源且免费的，就像 O3DE 中的其他所有功能一样。请参阅&lt;a href="https://aws.amazon.com/blogs/gametech/splitting-the-atom-introducing-lumberyards-new-photorealistic-renderer/"&gt;这篇博文&lt;/a&gt;，详细了解 Atom 渲染器。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview5.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview5.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;网络&lt;/h2&gt; 
&lt;p&gt;O3DE 中包含了全新的网络堆栈，它具有高度灵活的数据驱动模型，支持 TCP/UDP，并在简单的 API 背后抽象了低延迟传输层。该堆栈支持加密和压缩，并具有内置模拟器，用于延迟、抖动、重新排序和丢失。为了确保最低延迟和最高保真度，它支持通过无序不可靠的数据复制进行实体复制、本地预测延迟补偿、针对服务器权限的向后协调，及支持自动去同步检测和修正的可拆分玩家行为。为了确保开发人员可以使用不同的服务器型号，该堆栈支持开箱即用的玩家托管服务器和专用服务器型号。请参阅&lt;a href="https://aws.amazon.com/blogs/gametech/building-battle-tested-network-transport/"&gt;这篇博文&lt;/a&gt;，获取更多开发详情。&lt;/p&gt; 
&lt;h2&gt;更快、更轻、性能更高&lt;/h2&gt; 
&lt;p&gt;相较于它的前辈 Lumberyard，O3DE 更轻便、速度更快、性能更高。我们的工程师删除了超过 200 万行旧代码冗余，为开源做好准备。我们创建了新的高性能数学库，这些库利用现代 CPU 和当前 SIMD 指令集。数学是精彩游戏和模拟的核心，我们确保了我们的客户、贡献者和社群拥有非常坚实的工作基础。最终结果将是，帧率提高，平台支持得到改进（尤其是在 ARM 设备上），准确性提高，及可用于动画、特效和游戏运行的计算资源增加。毕竟，3D 引擎中的几乎所有内容都与数学有关！ 请参阅&lt;a href="https://aws.amazon.com/blogs/gametech/building-a-smarter-foundation-math-improvements-in-lumberyard/"&gt;这篇博文&lt;/a&gt;，详细了解我们的高性能数学工作。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview6.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview6.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;支持云&lt;/h2&gt; 
&lt;p&gt;我们额外添加了云功能，包括对 Amazon Kinesis、AWS Lambda、Amazon Cognito、Amazon CloudWatch、AWS CloudTrail、AWS IAM、Amazon GameLift 和更新的 AWS C++ SDK 的新支持。借助这些与云服务的深度集成，开发人员能够交付具有可自定义支持功能的游戏和模拟，快速创新，并吸引和留住现有玩家和新玩家。随着合作伙伴和社群不断增加 AWS 之外的更多选项，O3DE 的云功能将进一步增加。此外，在未来几个月里，AWS 将继续构建更多云功能，并支持其他文件格式，涵盖一系列新用例。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview7.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview7.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;生产力和可扩展性&lt;/h2&gt; 
&lt;p&gt;工具和管道实施对于简化生产所需的时间同样至关重要。为了帮助加速自定义，我们扩展了 UI 工具，它使用可访问代码接口的 Python 扩展和 Qt 来创建自定义编辑器组件。我们通过新的步骤前和步骤后 Python 绑定极大地更新了资产创建，以允许 FBX 和材料处理的动态处理和自定义行为。这些绑定使技术类游戏艺术家能够编写可拆分、分配或重新定位资产的 Python 脚本，以及从任何输入源创建自定义材料。&lt;/p&gt; 
&lt;p&gt;许多其他功能也发生了变化，以便社群以新方式对其扩展。Script Canvas 现在支持通过未来本机代码支持编译为 Lua，并通过我们的可扩展行为上下文管理器进行脚本绑定。我们已经从 Lumberyard 管理游戏内部资产的“切片”模型转向了大家都很熟悉的预制模型。我们的模块化标准接口使开发人员能够针对其他 Gem 接口执行直接函数调用，并提供 IDE 自动完成支持。总体而言，我们的目标之一是使开发人员能够在自己的项目中发现和实施功能（无论是整个还是部分功能）。&lt;/p&gt; 
&lt;h2&gt;后续行动&lt;/h2&gt; 
&lt;p&gt;开放式 3D 引擎目前已提供开发人员预览版，我们的团队正在努力工作，争取在今年晚些时候提供生产就绪型版本。我们很高兴能与社群和其他 Open 3D Foundation 合作伙伴合作，在未来几个月和几年里不断为引擎添加更多内容。我们将与 Linux Foundation、合作伙伴和大学合作，以帮助实现更多创新，开展令人兴奋的即将宣布的年度 O3DE 新活动，以及举办全球行业展览和骇客马拉松。&lt;/p&gt; 
&lt;p&gt;我们希望这项开源工作提供游戏和模拟开发平台，任何人都可以利用该平台快速构建更加精彩的游戏和实时模拟。我们相信，现在正是发展 3D 可视化和工具业务的理想时机，希望您能加入我们的旅程。正如我们在 Amazon 常说的那样，现在我们仍然在“第一天”。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview8.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/built-for-builders-the-story-of-aws-and-the-open-3d-engine-developer-preview8.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;请访问 &lt;a href="https://docs.o3de.org/"&gt;docs.o3de.org&lt;/a&gt; 并&lt;a href="https://youtu.be/6ccjR9qI5YU"&gt;观看视频&lt;/a&gt;，详细了解开放式 3D 引擎计划。&lt;/p&gt; 
&lt;h2&gt;本篇作者&lt;/h2&gt; 
&lt;footer&gt; 
 &lt;div class="blog-author-box"&gt; 
  &lt;h3 class="lb-h4"&gt;Amar Mehta&lt;/h3&gt; 
  &lt;p&gt;Amar Mehta 是 Amazon 游戏科技的模拟和视频游戏 3D 引擎技术团队领导。视频游戏、电影、汽车、建筑、工程和零售行业的开发人员使用该技术，在 AWS 业界领先的云计算服务上实时创建高保真内容。在加入 AWS 之前，Amar 曾领导 Amazon 零售视频游戏部门的多项工作，为全球数十亿玩家带来 AAA 级游戏和独立游戏体验。他曾在初创公司和财富 500 强公司担任技术和业务领导职务。Mehta 先生热衷于促进公平和多元化，他坚信游戏能够降低社会壁垒，改善所有人获得技术的能力。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/footer&gt; 
&lt;footer&gt; 
 &lt;div class="blog-author-box"&gt; 
  &lt;h3 class="lb-h4"&gt;Royal O’Brien&lt;/h3&gt; 
  &lt;p&gt;Royal O’Brien 是 Amazon 的一位负责人，其工作是与内部和外部客户合作，解决他们的技术和业务需求。他的大部分时间花在与合作伙伴合作上，为 Open 3D Foundation 创建开源实践和程序。在加入 Amazon 之前，Royal 曾在美国海军陆战队服役，并在模拟和视频游戏行业工作超过 25 年。他曾担任工程师和高管，负责企业发展、风险投资、企业谈判和战略营销计划。他创立并退出了多家公司，帮助为多家财富 500 强公司提供服务和许可技术。作为一名工程师，他拥有视频、电话和数字分发技术领域的多项专利。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/footer&gt;</content:encoded>
										</item>
		<item>
		<title>AppSync调试方法</title>
		<link>https://aws.amazon.com/cn/blogs/china/appsync-debugging-method/</link>
				<pubDate>Mon, 06 Sep 2021 04:34:16 +0000</pubDate>
		<dc:creator><![CDATA[AWS Team]]></dc:creator>
				<category><![CDATA[Analytics]]></category>
		<category><![CDATA[AWS AppSync]]></category>

		<guid isPermaLink="false">4c5a3c82b2b52a29bbb651679d6013515f529091</guid>
				<description>GraphQL是一种新的API规范及查询语言，它按照客户的查询需求“不多不少”准确返回查询结果。它通过简明的类型系统描述查询及返回结果。GraphQL 通常通过单入口来提供 HTTP 服务的完整功能，这一实现方式与暴露一组 URL 且每个 URL 只暴露一个资源的 REST API 不同。GraphQL可以通过 GraphQL schema 的持续演进来避免版本控制。</description>
								<content:encoded>&lt;h2&gt;一. GraphQL简介&lt;/h2&gt; 
&lt;p&gt;GraphQL是一种新的API规范及查询语言，它按照客户的查询需求“不多不少”准确返回查询结果。它通过简明的类型系统描述查询及返回结果。GraphQL 通常通过单入口来提供 HTTP 服务的完整功能，这一实现方式与暴露一组 URL 且每个 URL 只暴露一个资源的 REST API 不同。GraphQL可以通过 GraphQL schema 的持续演进来避免版本控制。&lt;/p&gt; 
&lt;p&gt;关于GraphQL的规范请参考：&lt;a href="https://graphql.org/"&gt;https://graphql.org/&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;二.&amp;nbsp; AppSync简介&lt;/h2&gt; 
&lt;p&gt;AWS AppSync 是一项完全托管的服务，通过处理与 AWS DynamoDB、Lambda 等数据源之间繁重的安全连接任务来简化 GraphQL API 的开发。添加缓存以提高性能、订阅以支持实时更新以及客户端数据存储以使离线客户端保持同步等操作也一样轻松简单。&lt;/p&gt; 
&lt;p&gt;通过托管的 GraphQL 订阅，AWS AppSync 可以通过 Websocket 向数百万客户端推送实时数据更新。对于移动和 Web 应用程序，AppSync 还可在设备离线时提供本地数据访问，并在它们重新上线后提供支持自定义冲突解决方案的数据同步功能。&lt;/p&gt; 
&lt;p&gt;关于AppSync的更详细的介绍请参考：&lt;a href="https://aws.amazon.com/cn/appsync/"&gt;https://aws.amazon.com/cn/appsync/&lt;/a&gt;。&lt;/p&gt; 
&lt;h2&gt;三. AppSync常见调试工具&lt;/h2&gt; 
&lt;p&gt;AppSync支持以下认证授权方式：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;API Key&lt;/li&gt; 
 &lt;li&gt;IAM&lt;/li&gt; 
 &lt;li&gt;OpenID Connect&lt;/li&gt; 
 &lt;li&gt;Lambda&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;不同的授权方式，直接影响调试的复杂度。本文以最为常用的API Key及IAM授权方式进行分析。&lt;/p&gt; 
&lt;table border="1" width="433"&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td rowspan="2" width="87"&gt;tool&lt;/td&gt; 
   &lt;td colspan="2" width="173"&gt;Query and Mutation&lt;/td&gt; 
   &lt;td colspan="2" width="173"&gt;Real-time Subscription&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="87"&gt;API Key&lt;/td&gt; 
   &lt;td width="87"&gt;IAM&lt;/td&gt; 
   &lt;td width="87"&gt;API Key&lt;/td&gt; 
   &lt;td width="87"&gt;IAM&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="87"&gt;Postman&lt;/td&gt; 
   &lt;td width="87"&gt;√&lt;/td&gt; 
   &lt;td width="87"&gt;√&lt;/td&gt; 
   &lt;td width="87"&gt;√&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="87"&gt;websocat&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;√&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="87"&gt;wscat&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;√&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="87"&gt;curl&lt;/td&gt; 
   &lt;td width="87"&gt;√&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td width="87"&gt;wget&lt;/td&gt; 
   &lt;td width="87"&gt;√&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
   &lt;td width="87"&gt;x&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;h2&gt;&lt;/h2&gt; 
&lt;h2&gt;四. AppSync的WebSocket验证授权方法&lt;/h2&gt; 
&lt;p&gt;AppSync的验证授权遵循&lt;a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html"&gt;Amazon Web Service v4 Signature&lt;/a&gt;。但是对于real-time subscription，须遵循&lt;a href="https://docs.aws.amazon.com/appsync/latest/devguide/real-time-websocket-client.html"&gt;https://docs.aws.amazon.com/appsync/latest/devguide/real-time-websocket-client.html&lt;/a&gt;，完成websocket协议上的验证授权。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method1.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method1.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 从上述图例，我们可以明确：&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Query和Mutation的endpoint协议为HTTPS。&lt;/li&gt; 
 &lt;li&gt;Real-Time subscription的endpoint协议为WebSocket。即Real-Time subscription无法接入协议为 HTTPS的endpoint。&lt;/li&gt; 
&lt;/ol&gt; 
&lt;p&gt;在进行Real-Time subscription时，我们需要指定WebSocket sub protocol：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;Sec-WebSocket-Protocol：graphql-ws&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;通过aws cli我们可以获得AppSync的endpoint 信息。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;aws appsync get-graphql-api --api-id b553xzgnijdtjjvli67zc3zmly
{
    "graphqlApi": {
        "name": "demo1",
        "apiId": "b553xzgnijdtjjvli67zc3zmly",
        "authenticationType": "API_KEY",
        "logConfig": {
            "fieldLogLevel": "ERROR",
            "cloudWatchLogsRoleArn": "arn:aws-cn:iam::162611943124:role/service-role/appsync-graphqlapi-logs-cn-north-1",
            "excludeVerboseContent": false
        },
        "arn": "arn:aws-cn:appsync:cn-north-1:162611943124:apis/b553xzgnijdtjjvli67zc3zmly",
        "uris": {
            "REALTIME": "wss://vlvwhsddczatlel4l4b4k4ygri.appsync-realtime-api.cn-north-1.amazonaws.com.cn/graphql",
            "GRAPHQL": "https://vlvwhsddczatlel4l4b4k4ygri.appsync-api.cn-north-1.amazonaws.com.cn/graphql"
        },
        "tags": {},
        "xrayEnabled": false
    }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;所有的验证授权都是在”GRAPHQL” endpoint上完成，对于Query和Mutation非常易于理解；而实时订阅首先从在”GRAPHQL” endpoint 上获得验证授权信息，然后在”REALTIME” endpoint上进行数据的交互。&lt;/p&gt; 
&lt;p&gt;客户端在handshake过程中完成与AppSync的验证授权。验证授权过程中必须携带的信息：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;header&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;base64编码的字符串化的JSON对象。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;payload&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;base64编码的负荷。&lt;/p&gt; 
&lt;p&gt;API KEY的验证授权&lt;/p&gt; 
&lt;p&gt;基于API KEY的验证授权，其header JSON对象为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;{

&amp;nbsp;&amp;nbsp;&amp;nbsp; "host":"example1234567890000.appsync-api.us-east-1.amazonaws.com",

&amp;nbsp;&amp;nbsp;&amp;nbsp; "x-api-key":"da2-12345678901234567890123456"

}&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;其payload JSON对象为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;{}&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;WebSocket连接串为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;wss://host/graphql?header&amp;amp;amp;payload&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;例如：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;wss://vlvwhsddczatlel4l4b4k4ygri.appsync-realtime-api.cn-north-1.amazonaws.com.cn/graphql?header=eyJob3N0IjogInZsdndoc2RkY3phdGxlbDRsNGI0azR5Z3JpLmFwcHN5bmMtYXBpLmNuLW5vcnRoLTEuYW1hem9uYXdzLmNvbS5jbiIsICJ4LWFwaS1rZXkiOiAiZGEyLWQ3YW5lcDdtYXJobnZuenp6NTQzbjY0ZHZ1In0=&amp;amp;amp;payload=e30=&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;基于IAM的验证授权&lt;/p&gt; 
&lt;p&gt;基于IAM的验证授权，验证授权http的信息汇总为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;{
  url: "https://example1234567890000.appsync-api.us-east-1.amazonaws.com/graphql/connect",
  data: "{}",
  method: "POST",
  headers: {
    "accept": "application/json, text/javascript",
    "content-encoding": "amz-1.0",
    "content-type": "application/json; charset=UTF-8",
  }
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;基于上述内容进行V4的签名认证，基于规范“/connect”被添加到cannocial uri后，其正确内容应为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;canonical_uri = '/graphql/connect'&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;基于上述信息完成V4签名后，基于IAM验证授权的header JSON对象为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;{
    "accept": "application/json, text/javascript",
    "content-encoding": "amz-1.0",
    "content-type": "application/json; charset=UTF-8",
    "host": "vlvwhsddczatlel4l4b4k4ygri.appsync-api.cn-north-1.amazonaws.com.cn",
    "x-amz-date": "20210903T065522Z",
    "Authorization": "AWS4-HMAC-SHA256 Credential=AKIASLXDNK3KFKRBJQU3/20210903/cn-north-1/appsync/aws4_request, SignedHeaders=host;x-amz-date, Signature=a50cc5ab866de3381e5c85ae0fefefb46f7522d62e0a79fb95f9340975382a75"
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;其payload JSON对象为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;{}&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;其wss链接串为：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;wss://vlvwhsddczatlel4l4b4k4ygri.appsync-realtime-api.cn-north-1.amazonaws.com.cn/graphql?header=eyJhY2NlcHQiOiAiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0IiwgImNvbnRlbnQtZW5jb2RpbmciOiAiYW16LTEuMCIsICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCIsICJob3N0IjogInZsdndoc2RkY3phdGxlbDRsNGI0azR5Z3JpLmFwcHN5bmMtYXBpLmNuLW5vcnRoLTEuYW1hem9uYXdzLmNvbS5jbiIsICJ4LWFtei1kYXRlIjogIjIwMjEwOTAzVDA2NTUyMloiLCAiQXV0aG9yaXphdGlvbiI6ICJBV1M0LUhNQUMtU0hBMjU2IENyZWRlbnRpYWw9QUtJQVNMWEROSzNLRktSQkpRVTMvMjAyMTA5MDMvY24tbm9ydGgtMS9hcHBzeW5jL2F3czRfcmVxdWVzdCwgU2lnbmVkSGVhZGVycz1ob3N0O3gtYW16LWRhdGUsIFNpZ25hdHVyZT1hNTBjYzVhYjg2NmRlMzM4MWU1Yzg1YWUwZmVmZWZiNDZmNzUyMmQ2MmUwYTc5ZmI5NWY5MzQwOTc1MzgyYTc1In0=&amp;amp;amp;payload=e30=&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h2&gt;五. Postman调试&lt;/h2&gt; 
&lt;h3&gt;（一）基于API Key的Query调试&lt;/h3&gt; 
&lt;p&gt;选择授权类型为：API Key，设置key：x-api-key，及其值。&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method2.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method2.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 输入查询内容：&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method3.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method3.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;返回查询结果：&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method4.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method4.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;（二）基于API Key的Real-Time Subscription&lt;/h3&gt; 
&lt;p&gt;第一步，选择New&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method5.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method5.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 第二步，选择WebSocket Request Beta&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method6.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method6.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 第三步，在“Params”内依次填入base64编码的：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;header&lt;/li&gt; 
 &lt;li&gt;payload&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method7.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method7.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;第四步，在Headers内填入：&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method8.png" width="624" height="78"&gt;&lt;br&gt; 第五步，在“Enter server URL”填入wss endpoint,然后点connect。&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method9.png" width="624" height="78"&gt;第六步，在“Compose Message”内填入订阅信息：&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method10.png" width="624" height="78"&gt;然后点“Send”&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method11.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method11.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 当有数据更新时，实时接收到更新&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method12.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method12.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;（三）基于IAM的实时订阅&lt;/h3&gt; 
&lt;p&gt;由于涉及到V4签名，基于IAM的实时订阅无法通过Postman等工具进行测试。本文将基于python WebSocket进行测试。&lt;/p&gt; 
&lt;p&gt;代码可以从https://github.com/picomy/appsync-websocket下载。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;import sys, os, hashlib, hmac
from base64 import b64encode, decode
from datetime import datetime
from uuid import uuid4
import websocket
import threading
import json

# ************************** Reference **************************
# https://docs.aws.amazon.com/appsync/latest/devguide/real-time-websocket-client.html
# https://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html
# https://docs.aws.amazon.com/apigateway/api-reference/signing-requests/
# ************************** Reference **************************

# The client connect to wss_url through websocket protocol 
wss_url = 'wss://vlvwhsddczatlel4l4b4k4ygri.appsync-realtime-api.cn-north-1.amazonaws.com.cn/graphql'

# The client will authenticate itself from http_url through http protocol
# Query and mutation will be ran within http_url endpoint
http_url = 'https://vlvwhsddczatlel4l4b4k4ygri.appsync-api.cn-north-1.amazonaws.com.cn/graphql'

host = http_url.replace('https://','').replace('/graphql','')
# IAM authentication method
method = 'POST'
region = 'cn-north-1'
service = 'appsync'
access_key = 'xxxxxxxxxx'
secret_key = 'xxxxxxxxxx'
canonical_uri = '/graphql/connect' 
canonical_querystring = ''
# payload type has to be string
payload = '{}'
accept = "application/json, text/javascript"
content_encoding = "amz-1.0"
content_type = "application/json; charset=UTF-8"

# ********************************** AWS V4 Signature **********************************
def sign(key, msg):
    return hmac.new(key, msg.encode('utf-8'), hashlib.sha256).digest()

def getSignatureKey(key, dateStamp, regionName, serviceName):
    kDate = sign(('AWS4' + key).encode('utf-8'), dateStamp)
    kRegion = sign(kDate, regionName)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, 'aws4_request')
    return kSigning

def gen_auth(servic_name, region_name, ak, sk, canonical_uri, canonical_querystring, payload):
    t = datetime.utcnow()
    amzdate = t.strftime('%Y%m%dT%H%M%SZ')
    datestamp = t.strftime('%Y%m%d') # Date w/o time, used in credential scope
    payload_hash = hashlib.sha256(payload.encode('utf-8')).hexdigest()
    canonical_headers = 'host:' + host + '\n' + 'x-amz-date:' + amzdate + '\n'
    signed_headers = 'host;x-amz-date'
    canonical_request = method + '\n' + canonical_uri + '\n' + canonical_querystring + '\n' + canonical_headers + '\n' + signed_headers + '\n' + payload_hash
    algorithm = 'AWS4-HMAC-SHA256'
    credential_scope = datestamp + '/' + region + '/' + service + '/' + 'aws4_request'
    string_to_sign = algorithm + '\n' +  amzdate + '\n' +  credential_scope + '\n' +  hashlib.sha256(canonical_request.encode('utf-8')).hexdigest()
    signing_key = getSignatureKey(secret_key, datestamp, region, service)
    signature = hmac.new(signing_key, (string_to_sign).encode('utf-8'), hashlib.sha256).hexdigest()
    authorization_header = algorithm + ' ' + 'Credential=' + access_key + '/' + credential_scope + ', ' +  'SignedHeaders=' + signed_headers + ', ' + 'Signature=' + signature
    return ({'auth_date':amzdate,'auth_header':authorization_header})

# *************************** AppSync: websocket ***************************
# Generate IAM authentication header
auth = gen_auth(service,region,access_key,secret_key,canonical_uri,canonical_querystring,payload)

iam_header = {
    'accept': accept,
    'content-encoding': content_encoding,
    'content-type': content_type,
    'host': host,
    'x-amz-date': auth['auth_date'],
    'Authorization': auth['auth_header']
}

# GraphQL subscription Registration object
GQL_SUBSCRIPTION = json.dumps({
        'query': 'subscription MySubscription {subscribeToEventComments(eventId: "0534ad04-fd29-49d6-815a-fa64a80979c1") {commentId content createdAt eventId } }',
        'variables': {}
})


# Set up Timeout Globals
timeout_timer = None
timeout_interval = 10
# Subscription ID (client generated)
SUB_ID = str(uuid4())

# Calculate UTC time in ISO format (AWS Friendly): YYYY-MM-DDTHH:mm:ssZ
def header_time():
    return datetime.utcnow().isoformat(sep='T',timespec='seconds') + 'Z'

# Encode Using Base 64
def header_encode( header_obj ):
    return b64encode(json.dumps(header_obj).encode('utf-8')).decode('utf-8')

# reset the keep alive timeout daemon thread
def reset_timer( ws ):
    global timeout_timer
    global timeout_interval

    if (timeout_timer):
        timeout_timer.cancel()
    timeout_timer = threading.Timer( timeout_interval, lambda: ws.close() )
    timeout_timer.daemon = True
    timeout_timer.start()

# Socket Event Callbacks, used in WebSocketApp Constructor
def on_message(ws, message):
    global timeout_timer
    global timeout_interval

    print('### message ###')
    print('&amp;lt;&amp;lt; ' + message)

    message_object = json.loads(message)
    message_type   = message_object['type']

    if( message_type == 'ka' ):
        reset_timer(ws)

    elif( message_type == 'connection_ack' ):
        timeout_interval = int(json.dumps(message_object['payload']['connectionTimeoutMs']))
        payload = GQL_SUBSCRIPTION
        canonical_uri ='/graphql'
        sub_auth = gen_auth(service,region,access_key,secret_key,canonical_uri,canonical_querystring,payload)
        register = {
            'id': SUB_ID,
            'payload': {
                'data': GQL_SUBSCRIPTION,
                'extensions': {
                    'authorization': {
                        'host': host,
                        'Authorization': sub_auth['auth_header'],
                        'x-amz-date': sub_auth['auth_date']
                    }
                }
            },
            'type': 'start'
        }
        start_sub = json.dumps(register)
        print('&amp;gt;&amp;gt; '+ start_sub )
        ws.send(start_sub)

    elif(message_type == 'data'):
        deregister = {
            'type': 'stop',
            'id': SUB_ID
        }
        end_sub = json.dumps(deregister)
        print('&amp;gt;&amp;gt; ' + end_sub )
        ws.send(end_sub)

    elif(message_object['type'] == 'error'):
        print ('Error from AppSync: ' + message_object['payload'])
    
def on_error(ws, error):
    print('### error ###')
    print(error)

def on_close(ws):
    print('### closed ###')

def on_open(ws):
    print('### opened ###')
    init = {
        'type': 'connection_init'
    }
    init_conn = json.dumps(init)
    print('&amp;gt;&amp;gt; '+ init_conn)
    ws.send(init_conn)

if __name__ == '__main__':
    # Uncomment to see socket bytestreams
    #websocket.enableTrace(True)

    # Set up the connection URL, which includes the Authentication Header
    #   and a payload of '{}'.  All info is base 64 encoded
    connection_url = wss_url + '?header=' + header_encode(iam_header) + '&amp;amp;payload=e30='

    # Create the websocket connection to AppSync's real-time endpoint
    #  also defines callback functions for websocket events
    #  NOTE: The connection requires a subprotocol 'graphql-ws'
    print( 'Connecting to: ' + connection_url )

    ws = websocket.WebSocketApp( connection_url,
                            subprotocols=['graphql-ws'],
                            on_open = on_open,
                            on_message = on_message,
                            on_error = on_error,
                            on_close = on_close,)

    ws.run_forever()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;实际运行结果：&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method13.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/AppSync debugging method13.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;本篇作者&lt;/h2&gt; 
&lt;footer&gt; 
 &lt;div class="blog-author-box"&gt; 
  &lt;div class="blog-author-image"&gt;
   &lt;img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/Author/picomy.jpg" width="125"&gt;
  &lt;/div&gt; 
  &lt;h3 class="lb-h4"&gt;杨帅军&lt;/h3&gt; 
  &lt;p&gt;资深数据架构师，专注于数据处理。目前主要为车企提供数据治理服务。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/footer&gt;</content:encoded>
										</item>
		<item>
		<title>Amazon Managed Grafana 现已全面推出，并具有许多新功能</title>
		<link>https://aws.amazon.com/cn/blogs/china/amazon-managed-grafana-is-now-generally-available-with-many-new-features/</link>
				<pubDate>Fri, 03 Sep 2021 13:36:50 +0000</pubDate>
		<dc:creator><![CDATA[Danilo Poccia]]></dc:creator>
				<category><![CDATA[News]]></category>

		<guid isPermaLink="false">d35bdf870737959a67f2dba3bb762a65b082508d</guid>
				<description>12 月，我们推出了 Amazon Managed Grafana 的预览版，这是一项与 Grafana Labs 合作开发的完全托管服务，可让您轻松使用开源版本和企业版 Grafana 来可视化和分析多个来源的数据。借助 Amazon Managed Grafana，您可以分析指标、日志和跟踪，而无需预置服务器或配置和更新软件。</description>
								<content:encoded>&lt;p&gt;12 月，我们推出了 &lt;a href="https://aws.amazon.com/grafana/"&gt;Amazon Managed Grafana&lt;/a&gt; 的&lt;a href="https://aws.amazon.com/blogs/aws/announcing-amazon-managed-grafana-service-in-preview/"&gt;预览版&lt;/a&gt;，这是一项&lt;a href="https://grafana.com/blog/2020/12/15/announcing-amazon-managed-service-for-grafana/"&gt;与 Grafana Labs 合作开发&lt;/a&gt;的完全托管服务，可让您轻松使用开源版本和企业版 &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt; 来可视化和分析多个来源的数据。借助 Amazon Managed Grafana，您可以分析指标、日志和跟踪，而无需预置服务器或配置和更新软件。&lt;/p&gt; 
&lt;p&gt;在预览期间，Amazon Managed Grafana 增加了很多&lt;a href="https://aws.amazon.com/blogs/mt/amazon-managed-service-for-grafana-amg-preview-updated-with-new-capabilities/"&gt;新的功能&lt;/a&gt;。今天，我很高兴地宣布，Amazon Managed Grafana 现已&lt;strong&gt;全面推出&lt;/strong&gt;，并附加全新功能：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style="padding-bottom: 0.5em"&gt;Grafana 现已&lt;a href="https://grafana.com/docs/grafana/latest/whatsnew/whats-new-in-v8-0/"&gt;升级至版本 8&lt;/a&gt;，并提供了新的数据源、可视化和功能，包括您只需构建一次即可在多个控制面板上重复使用的库面板、一个用于快速查找和查询指标的 Prometheus 指标浏览器，以及全新的状态时间表和状态历史可视化。&lt;/li&gt; 
 &lt;li style="padding-bottom: 0.5em"&gt;要在 Amazon Managed Grafana 工作区中集中查询其他数据源，您现在可以使用 &lt;a href="https://grafana.com/grafana/plugins/simpod-json-datasource/"&gt;JSON 数据源插件&lt;/a&gt;来查询数据。您现在还可以查询 &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;、&lt;a href="https://www.sap.com/products/hana.html"&gt;SAP HANA&lt;/a&gt;、&lt;a href="https://www.salesforce.com/"&gt;Salesforce&lt;/a&gt;、&lt;a href="https://www.servicenow.com/"&gt;ServiceNow&lt;/a&gt;、&lt;a href="https://www.atlassian.com/software/jira"&gt;Atlassian Jira&lt;/a&gt; 以及更多数据源。&lt;/li&gt; 
 &lt;li style="padding-bottom: 0.5em"&gt;您可以使用 &lt;a href="https://docs.aws.amazon.com/grafana/latest/userguide/Using-Grafana-APIs.html"&gt;Grafana API 密钥&lt;/a&gt;来发布您自己的控制面板或以编程方式访问您的 Grafana 工作区。例如，这是一个可用于添加数据源和控制面板的 &lt;a href="https://aws-observability.github.io/aws-o11y-recipes/recipes/amg-automation-tf/"&gt;Terraform 配方&lt;/a&gt;。&lt;/li&gt; 
 &lt;li style="padding-bottom: 0.5em"&gt;您可以使用&lt;a href="https://en.wikipedia.org/wiki/SAML_2.0"&gt;安全断言标记语言 2.0 (SAML 2.0)&lt;/a&gt; 来启用对 Amazon Managed Grafana 工作区的单点登录。我们与以下身份提供商 (IdP) 合作，以便在启动时将其集成：&lt;a href="https://www.cyberark.com/"&gt;Cyber​​Ark&lt;/a&gt;、&lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt;、&lt;a href="https://www.onelogin.com/"&gt;OneLogin&lt;/a&gt;、&lt;a href="https://www.pingidentity.com/"&gt;Ping Identity&lt;/a&gt; 和 &lt;a href="https://azure.microsoft.com/en-us/services/active-directory/"&gt;Azure Active Directory&lt;/a&gt;。&lt;/li&gt; 
 &lt;li style="padding-bottom: 0.5em"&gt;&lt;a title="" href="https://aws.amazon.com/cloudtrail/"&gt;AWS CloudTrail&lt;/a&gt; 会捕获来自 Amazon Managed Grafana 控制台的所有调用以及对 Amazon Managed Grafana API 操作的代码调用。通过这种方式，您可以记录用户、角色或 AWS 服务在 Amazon Managed Grafana 中执行的操作。此外，您现在可以审核 Amazon Managed Grafana 工作区中发生的突变，诸如控制面板被删除或者数据源权限被更改。&lt;/li&gt; 
 &lt;li&gt;该服务在 10 个 &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions"&gt;AWS 区域&lt;/a&gt;（完整列表位于文章末尾）推出。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;让我们快速演练一下，看看这在实践中是如何运作的。&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;使用 Amazon Managed Grafana&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;在 &lt;a href="https://console.aws.amazon.com/grafana/home"&gt;Amazon Managed Grafana 控制台&lt;/a&gt;中，我选择&lt;strong&gt;创建工作区&lt;/strong&gt;。“工作区”是逻辑上隔离的、高度可用的 Grafana 服务器。我输入工作区的名称和描述，然后选择&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-create-workspace.png"&gt;&lt;img class="aligncenter size-large wp-image-53771" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-create-workspace-1024x567.png" alt="控制台屏幕截图。" width="1024" height="567"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我可以通过 SAML 使用 &lt;a href="https://aws.amazon.com/single-sign-on/"&gt;AWS Single Sign-On (AWS SSO)&lt;/a&gt; 或外部身份提供商对我工作区的用户进行身份验证。为简单起见，我选择 AWS SSO。在后文中，我将展示 SAML 身份验证的工作原理。如果这是您第一次使用 AWS SSO，则您可以查看&lt;a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/prereqs.html"&gt;文档中的先决条件（例如，设置 AWS Organizations）&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/05/amg-auth.png"&gt;&lt;img class="aligncenter wp-image-53844 size-large" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/05/amg-auth-1024x670.png" alt="控制台屏幕截图。" width="1024" height="670"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;然后，我选择&lt;strong&gt;服务托管&lt;/strong&gt;权限类型。这样，Amazon Managed Grafana 会自动预置必要的 IAM 权限，以便访问我在下一步中要选择的 AWS 服务。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-permission-type.png"&gt;&lt;img class="aligncenter size-large wp-image-53773" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-permission-type-1024x346.png" alt="控制台屏幕截图。" width="1024" height="346"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;在&lt;strong&gt;服务托管权限设置&lt;/strong&gt;中，我选择监控我当前 AWS 账户中的资源。如果您使用 &lt;a href="https://aws.amazon.com/organizations/"&gt;AWS Organizations&lt;/a&gt; 来集中管理您的 AWS 环境，您可以使用 Grafana 来监控您&lt;a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_ous.html"&gt;组织单位 (OU)&lt;/a&gt; 中的资源。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-permission-access.png"&gt;&lt;img class="aligncenter size-large wp-image-53786" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-permission-access-1024x339.png" alt="控制台屏幕截图。" width="1024" height="339"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我可以选择我计划使用的 AWS 数据源。此配置将创建一个 &lt;a title="" href="https://aws.amazon.com/iam/"&gt;AWS Identity and Access Management (IAM)&lt;/a&gt; 角色，使 Amazon Managed Grafana 能够访问我账户中的这些资源。稍后，在 Grafana 控制台中，我可以将选定的服务设置为数据源。现在，我选择 &lt;a title="" href="https://aws.amazon.com/cloudwatch/"&gt;Amazon CloudWatch&lt;/a&gt;，以便我可以在 Grafana 控制面板中快速可视化 &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/working_with_metrics.html"&gt;CloudWatch 指标&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;在此，我还配置了将 &lt;a href="https://aws.amazon.com/prometheus/"&gt;Amazon Managed Service for Prometheus (AMP)&lt;/a&gt; 作为数据源的权限，并为我的应用程序提供完全托管的监控解决方案。例如，我可以使用 &lt;a href="https://aws.amazon.com/otel/"&gt;AWS Distro for OpenTelemetry&lt;/a&gt; 或 &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt; 服务器作为收集代理，从 &lt;a title="" href="https://aws.amazon.com/eks/"&gt;Amazon Elastic Kubernetes Service (EKS)&lt;/a&gt; 和 &lt;a title="" href="https://aws.amazon.com/ecs/"&gt;Amazon Elastic Container Service (Amazon ECS)&lt;/a&gt; 环境中收集 Prometheus 指标。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/amg-permission-aws-data-sources.png"&gt;&lt;img class="aligncenter size-large wp-image-54028" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/amg-permission-aws-data-sources-1024x829.png" alt="控制台屏幕截图。" width="1024" height="829"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;在此步骤中，我还选择 &lt;a title="" href="https://aws.amazon.com/sns/"&gt;Amazon Simple Notification Service (SNS)&lt;/a&gt; 作为通知渠道。与之前的数据源类似，此选项允许 Amazon Managed Grafana 访问 SNS，但不会设置通知渠道。我可以稍后在 Grafana 控制台中执行此操作。具体而言，此设置会将 SNS 发布权限以 &lt;code&gt;grafana&lt;/code&gt; 开头的主题添加到 Amazon Managed Grafana 控制台所创建的 IAM 角色中。如果您希望对 SNS 或任何数据源的权限进行更严格的控制，您可以在 IAM 控制台中编辑角色或对您的工作区使用客户托管权限。&lt;/p&gt; 
&lt;p&gt;最后，我查看一下所有选项并创建工作区。&lt;/p&gt; 
&lt;p&gt;几分钟后，工作区准备就绪，我找到了可用于访问 Grafana 控制台的&lt;strong&gt;工作区 URL&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-workspace-summary.png"&gt;&lt;img class="aligncenter size-large wp-image-53776" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-workspace-summary-1024x301.png" alt="控制台屏幕截图。" width="1024" height="301"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我需要至少为 Grafana 工作区分配一个用户或组才能访问工作区 URL。我选择&lt;strong&gt;分配新用户或组&lt;/strong&gt;，然后选择我的一个 AWS SSO 用户。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-aws-sso-auth.png"&gt;&lt;img class="aligncenter size-large wp-image-53778" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-aws-sso-auth-1024x289.png" alt="控制台屏幕截图。" width="1024" height="289"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;默认情况下，该用户被分配了&lt;strong&gt;查看者&lt;/strong&gt;用户类型，对工作区具有“仅查看”权限。要授予此用户创建和管理仪表板和警报的权限，我选择该用户，然后选择&lt;strong&gt;设为管理员&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-aws-sso-admin.png"&gt;&lt;img class="aligncenter size-large wp-image-53779" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-aws-sso-admin-1024x400.png" alt="控制台屏幕截图。" width="1024" height="400"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;回到工作区摘要，我按照工作区 URL 并使用我的 AWS SSO 用户凭证进行登录。我现在使用的是开源版的 Grafana。如果您是一名 Grafana 用户，那么您肯定对一切都很熟悉了。就我的第一个配置，我将专注于 AWS 数据源，因此我选择左侧竖条上的 AWS 徽标。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-aws-data-sources.png"&gt;&lt;img class="aligncenter size-large wp-image-53780" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-aws-data-sources-1024x512.png" alt="控制台屏幕截图。" width="1024" height="512"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;在此，我选择 CloudWatch。权限已经设置，因为我之前在服务托管权限设置中选择了 CloudWatch。我选择默认的 AWS 区域并添加数据源。我选择 CloudWatch 数据源，然后在&lt;strong&gt;控制面板&lt;/strong&gt;选项卡上，我找到了一些 AWS 服务的控制面板，例如 &lt;a title="" href="https://aws.amazon.com/ec2/"&gt;Amazon Elastic Compute Cloud (Amazon EC2)&lt;/a&gt;、&lt;a title="" href="https://aws.amazon.com/ebs/"&gt;Amazon Elastic Block Store (EBS)&lt;/a&gt;、&lt;a title="" href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;、&lt;a title="" href="https://aws.amazon.com/rds/"&gt;Amazon Relational Database Service (RDS)&lt;/a&gt; 和 &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html"&gt;CloudWatch LogsLogs&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-cloudwatch-dashboards.png"&gt;&lt;img class="aligncenter size-large wp-image-53781" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-cloudwatch-dashboards-1024x379.png" alt="控制台屏幕截图。" width="1024" height="379"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我导入 AWS Lambda 控制面板。我现在可以使用 Grafana 来监控我账户中 Lambda 函数的调用、错误和限制。这边就没有屏幕截图了，因为我在这个区域没有什么有趣的数据。&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;使用 SAML 身份验证&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;如果我没有启用 AWS SSO，我可以在创建工作区时选择 SAML 身份验证选项，并使用外部身份提供商 (IdP) 对 Amazon Managed Grafana 工作区的用户进行身份验证。对于现有工作区，我可以在工作区摘要中选择&lt;strong&gt;设置 SAML 配置&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;首先，我必须向我的 IdP 提供工作区 ID 和 URL 信息，以便生成用于配置此工作区的 IdP 元数据。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-saml-idp.png"&gt;&lt;img class="aligncenter size-large wp-image-53782" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-saml-idp-1024x254.png" alt="控制台屏幕截图。" width="1024" height="254"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;配置 IdP 后，我通过指定 URL 或复制并粘贴到编辑器来导入 IdP 元数据。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-saml-import-metadata.png"&gt;&lt;img class="aligncenter size-large wp-image-53783" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-saml-import-metadata-1024x252.png" alt="控制台屏幕截图。" width="1024" height="252"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;最后，我可以将 IdP 中的用户权限映射到 Grafana 用户权限，诸如指定哪些用户将在我的 Amazon Managed Grafana 工作区中拥有“管理员”、“编辑者”和“查看者”权限。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-saml-assertion-mapping.png"&gt;&lt;img class="aligncenter size-large wp-image-53784" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/03/amg-saml-assertion-mapping-1024x383.png" alt="控制台屏幕截图。" width="1024" height="383"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="text-decoration: underline"&gt;可用性和定价&lt;/span&gt;&lt;br&gt; &lt;/strong&gt;&lt;a href="https://aws.amazon.com/grafana/"&gt;Amazon Managed Grafana&lt;/a&gt; 现已在 10 个 AWS 区域推出：美国东部（弗吉尼亚北部）、美国东部（俄亥俄）、美国西部（俄勒冈）、欧洲（爱尔兰）、欧洲（法兰克福）、欧洲（伦敦）、亚太地区（新加坡）、亚太地区（东京）、亚太地区（悉尼）和亚太地区（首尔）。有关更多信息，请参阅 &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/"&gt;AWS 区域服务列表&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;使用 Amazon Managed Grafana，您每月只需为每个工作区中的活跃用户付费。用于发布控制面板的 Grafana API 密钥，每月按每个工作区的 API 用户许可证计费。您可以升级到企业版 Grafana，以便直接从 Grafana Labs 获取企业版插件、支持和按需培训。有关更多信息，&lt;a href="https://aws.amazon.com/grafana/pricing/"&gt;请参阅 Amazon Managed Grafana 定价页面&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://amazon.webex.com/webappng/sites/amazon/meeting/info/d66eaebcfa2c4f448e72c583ca8dcef2?isPopupRegisterView=true"&gt;欲了解更多信息，您可以参加将于 9 月 9 日星期四上午 9:00 PDT / 12:00 pm EDT / 6:00 pm CEST 举行的网络研讨会。&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/grafana/"&gt;立即开始使用 Amazon Managed Grafana，以便可视化和分析任何规模的运营数据。&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;— &lt;a title="Danilo 的 Twitter" href="https://twitter.com/danilop"&gt;Danilo&lt;/a&gt;&lt;/p&gt;</content:encoded>
										</item>
		<item>
		<title>AWS CloudFormation 的新功能 – 从故障点快速重试堆栈操作</title>
		<link>https://aws.amazon.com/cn/blogs/china/new-for-aws-cloudformation-quickly-retry-stack-operations-from-the-point-of-failure/</link>
				<pubDate>Fri, 03 Sep 2021 13:35:24 +0000</pubDate>
		<dc:creator><![CDATA[Danilo Poccia]]></dc:creator>
				<category><![CDATA[News]]></category>

		<guid isPermaLink="false">165ee27e85f79d9952436041e30c678bf6993358</guid>
				<description>AWS CloudFormation 为您提供了一种简单的方法，可以对相关 AWS 和第三方资源集合进行建模，快速、一致地预置它们，并在其整个生命周期中对它们进行管理。CloudFormation 模板描述了所需的资源及其依赖关系，以便您将它们作为堆栈共同启动和配置。您可以使用模板将整个堆栈作为单个单元创建、更新和删除，而不是单独管理资源。</description>
								<content:encoded>&lt;p&gt;云计算的巨大优势之一是您有权访问可编程基础设施。这可让您管理&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/infrastructure-as-code.html"&gt;基础设施即代码&lt;/a&gt;，并将相同的应用程序代码开发实践应用于基础设施预置。&lt;/p&gt; 
&lt;p&gt;&lt;a title="" href="https://aws.amazon.com/cloudformation/"&gt;AWS CloudFormation&lt;/a&gt; 为您提供了一种简单的方法，可以对相关 AWS 和第三方资源集合进行建模，快速、一致地预置它们，并在其整个生命周期中对它们进行管理。CloudFormation &lt;strong&gt;模板&lt;/strong&gt;描述了所需的资源及其依赖关系，以便您将它们作为&lt;strong&gt;堆栈&lt;/strong&gt;共同启动和配置。您可以使用模板将整个堆栈作为单个单元创建、更新和删除，而不是单独管理资源。&lt;/p&gt; 
&lt;p&gt;创建或更新堆栈时，您的操作可能会由于不同的原因而失败。例如，模板、模板的参数中可能存在错误，也可能存在模板之外的问题，例如 &lt;a title="" href="https://aws.amazon.com/iam/"&gt;AWS Identity and Access Management (IAM)&lt;/a&gt; 权限错误。发生此类错误时，CloudFormation 会将堆栈回滚到之前的稳定状态。对于堆栈创建，这意味着删除直到出错点之前创建的所有资源。对于堆栈更新，这意味着恢复以前的配置。&lt;/p&gt; 
&lt;p&gt;回滚到以前状态的操作对于生产环境来说非常合适，但您可能很难理解出现错误的原因。根据模板的复杂性和所涉及资源的数量，您可能会花很多时间等待所有资源回滚，然后再使用正确的配置更新模板并重试该操作。&lt;/p&gt; 
&lt;p&gt;今天，我很高兴与大家分享的功能是，CloudFormation 目前可让您&lt;strong&gt;禁用&lt;/strong&gt;自动回滚，在错误发生之前&lt;strong&gt;保持&lt;/strong&gt;资源成功创建或更新，以及从故障点&lt;strong&gt;重试&lt;/strong&gt;堆栈操作。通过这种方式，您可以快速迭代以解决和修复错误，并大大减少在开发环境中测试 CloudFormation 模板所需的时间。您可以在创建堆栈、更新堆栈时以及执行&lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-changesets.html"&gt;更改集&lt;/a&gt;时应用此新功能。我们来看看这些步骤的实际操作。&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;快速迭代以解决和修复 CloudFormation 堆栈问题&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;对于我的一个应用程序，我需要设置 &lt;a title="" href="https://aws.amazon.com/s3/"&gt;Amazon Simple Storage Service (Amazon S3)&lt;/a&gt; 存储桶、&lt;a title="" href="https://aws.amazon.com/sqs/"&gt;Amazon Simple Queue Service (SQS)&lt;/a&gt; 队列和 &lt;a title="" href="https://aws.amazon.com/dynamodb/"&gt;Amazon DynamoDB&lt;/a&gt; 表，该表将项目级更改串流至 &lt;a title="" href="https://aws.amazon.com/kinesis/"&gt;Amazon Kinesis&lt;/a&gt; 数据流。对于此设置，我编写了 CloudFormation 模板的第一个版本。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-yaml"&gt;AWSTemplateFormatVersion: "2010-09-09"
说明：一个用于解决和修复问题的示例模板
Parameters:
  ShardCountParameter:
    Type: Number
    说明：Kinesis 流的分区数
Resources:
  MyBucket:
    Type: AWS::S3::Bucket
  MyQueue:
    Type: AWS::SQS::Queue
  MyStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: !Ref ShardCountParameter
  MyTable：
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ArtistId"
          AttributeType: "S"
        - AttributeName: "Concert"
          AttributeType: "S"
        - AttributeName: "TicketSales"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ArtistId"
          "KeyType": "HASH"
        - AttributeName: "Concert"
          KeyType: "RANGE"
      KinesisStreamSpecification:
        StreamArn: !GetAtt MyStream.Arn
Outputs:
  BucketName:
    Value: !Ref MyBucket
    说明：我的 S3 存储桶的名称
  QueueName:
    Value: !GetAtt MyQueue.QueueName
    说明：我的 SQS 队列的名称
  StreamName:
    Value: !Ref MyStream
    说明：我的 Kinesis 流的名称
  TableName:
    Value: !Ref MyTable
    说明：我的 DynamoDB 表的名称&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;现在，我想用这个模板创建一个堆栈。在 &lt;a href="https://console.aws.amazon.com/cloudformation/home"&gt;CloudFormation 控制台&lt;/a&gt;上，我选择&lt;strong&gt;创建堆栈&lt;/strong&gt;。然后，我上传模板文件并选择&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-create-stack.png"&gt;&lt;img class="aligncenter size-large wp-image-54040" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-create-stack-1024x659.png" alt="控制台屏幕截图。" width="1024" height="659"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我输入堆栈的名称。然后，我填写堆栈参数。我的模板文件有一个参数 (&lt;code&gt;ShardCountParameter&lt;/code&gt;)，用于配置 Kinesis 数据流的&lt;a href="https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html"&gt;分区数量&lt;/a&gt;。我知道分区数量应该大于或等于 1，但错误地输入 0 并选择&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-name-parameters.png"&gt;&lt;img class="aligncenter size-large wp-image-54043" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-name-parameters-1024x499.png" alt="控制台屏幕截图。" width="1024" height="499"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;为了创建、修改或删除堆栈中的资源，我使用 &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html"&gt;IAM 角色&lt;/a&gt;。这样，我就明确界定了 CloudFormation 可用于堆栈操作的权限。此外，我可以使用相同的角色来在标准化和可重复的环境中自动部署堆栈。&lt;/p&gt; 
&lt;p&gt;在&lt;strong&gt;权限&lt;/strong&gt;中，我选择要用于堆栈操作的 IAM 角色。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-permissions.png"&gt;&lt;img class="aligncenter size-large wp-image-54042" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-permissions-1024x325.png" alt="控制台屏幕截图。" width="1024" height="325"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;现在是使用新功能的时候了！ 在&lt;strong&gt;堆栈故障选项&lt;/strong&gt;中，我选择&lt;strong&gt;保留成功预置的资源&lt;/strong&gt;，以便在出错时保留已创建的资源。失败的资源始终回滚到最近一个已知的稳定状态。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-failure-options.png"&gt;&lt;img class="aligncenter size-large wp-image-54044" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-failure-options-1024x273.png" alt="控制台屏幕截图。" width="1024" height="273"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我将所有其他选项保留为默认值，然后选择&lt;strong&gt;下一步&lt;/strong&gt;。然后，我查看自己的配置并选择&lt;strong&gt;创建堆栈&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;堆栈的创建操作会执行几秒钟，然后由于错误而失败。在&lt;strong&gt;事件&lt;/strong&gt;选项卡中，我查看事件的时间表。开始创建堆栈的事件位于底部。最近的事件位于顶部。由于分区的数量 (&lt;code&gt;ShardCount&lt;/code&gt;) 低于最小值，因此流资源的属性验证失败。因此，堆栈现在处于 &lt;code&gt;CREATE_FAILED&lt;/code&gt; 状态。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-parameter.png"&gt;&lt;img class="aligncenter size-large wp-image-54045" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-parameter-1024x605.png" alt="控制台屏幕截图。" width="1024" height="605"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我选择保留预置的资源，因此在错误发生之前创建的所有资源仍然存在。在&lt;strong&gt;资源&lt;/strong&gt;选项卡中，S3 存储桶和 SQS 队列处于 &lt;code&gt;CREATE_COMPLETE&lt;/code&gt; 状态，而 Kinesis 数据流处于 &lt;code&gt;CREATE_FAILED&lt;/code&gt; 状态。DynamoDB 表的创建取决于 Kinesis 数据流是否可用，因为该表将数据流用于其属性之一 (&lt;code&gt;KinesisStreamSpecification&lt;/code&gt;)。因此，表的创建尚未开始，并且该表不在列表中。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-preserved-resources.png"&gt;&lt;img class="aligncenter size-large wp-image-54046" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-preserved-resources-1024x408.png" alt="控制台屏幕截图。" width="1024" height="408"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;回滚现在已暂停，并且我有一些新的选项：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;重试&lt;/strong&gt; – 在不作任何更改的情况下重试堆栈操作。如果资源由于模板之外的问题而无法预置，此选项就非常有用。我可以修复这个问题，然后从故障点重试。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt; – 在重试堆栈创建之前更新模板或参数。堆栈更新从最近一个操作因错误而中断的位置开始。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;回滚&lt;/strong&gt; – 回滚到最近一个已知的稳定状态。这类似于默认的 CloudFormation 行为。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-paused-options.png"&gt;&lt;img class="aligncenter size-large wp-image-54048" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-stack-paused-options-1024x204.png" alt="控制台屏幕截图。" width="1024" height="204"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;修复参数中的问题&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;我很快意识到输入了错误的分区数量参数，因此选择&lt;strong&gt;更新&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;我不需要更改模板来修复此错误。&amp;nbsp;在&lt;strong&gt;参数&lt;/strong&gt;中，我修复了之前的错误并输入正确的分区数量：一个分区。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-update-stack-parameters.png"&gt;&lt;img class="aligncenter size-large wp-image-54051" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-update-stack-parameters-1024x308.png" alt="控制台屏幕截图。" width="1024" height="308"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我将所有其他选项保留为当前值，然后选择&lt;strong&gt;下一步&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;在&lt;strong&gt;更改集预览&lt;/strong&gt;中，我看到更新将尝试修改 Kinesis 流 (当前处于 &lt;code&gt;CREATE_FAILED&lt;/code&gt; 状态) 并添加 DynamoDB 表。我查看其他配置并选择&lt;strong&gt;更新堆栈&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-change-set-preview-1.png"&gt;&lt;img class="aligncenter size-large wp-image-54056" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-change-set-preview-1-1024x389.png" alt="控制台屏幕截图。" width="1024" height="389"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;现在更新进行中。我解决了所有问题吗？ 还没有。一段时间后，更新失败。&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;修复模板之外的问题&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;Kinesis 流已创建，但 CloudFormation 担任的 IAM 角色没有创建 DynamoDB 表的权限。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-permissions.png"&gt;&lt;img class="aligncenter wp-image-54057 size-large" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-permissions-1024x488.png" alt="控制台屏幕截图。" width="1024" height="488"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;在 &lt;a href="https://console.aws.amazon.com/iam/home"&gt;IAM 控制台&lt;/a&gt;中，我向堆栈操作使用的角色添加额外权限，以便该角色能够创建 DynamoDB 表。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-iam-permissions.png"&gt;&lt;img class="aligncenter size-large wp-image-54063" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-iam-permissions-1024x315.png" alt="控制台屏幕截图。" width="1024" height="315"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;返回 &lt;a href="https://console.aws.amazon.com/cloudformation/home"&gt;CloudFormation 控制台&lt;/a&gt;，我选择&lt;strong&gt;重试&lt;/strong&gt;选项。具备新权限后，DynamoDB 表的创建将开始，但一段时间后，出现另一个错误。&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;修复模板中的问题&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;这一次，在定义 DynamoDB 表的模板中存在错误。在 &lt;code&gt;AttributeDefinitions&lt;/code&gt; 部分中，有一个未在架构中使用的属性 (&lt;code&gt;TicketSales&lt;/code&gt;)。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-template.png"&gt;&lt;img class="aligncenter size-large wp-image-54058" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-errors-template-1024x185.png" alt="控制台屏幕截图。" width="1024" height="185"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;对于 DynamoDB，模板中定义的属性应用于主键或索引。我更新了模板并删除 &lt;code&gt;TicketSales&lt;/code&gt; 属性定义。&lt;/p&gt; 
&lt;p&gt;由于正在编辑模板，因此我借此机会将 &lt;code&gt;MinValue&lt;/code&gt; 和 &lt;code&gt;MaxValue&lt;/code&gt; 属性添加到分区数量参数 (&lt;code&gt;ShardCountParameter&lt;/code&gt;) 中。这样，CloudFormation 可以在开始部署之前检查值是否在正确的范围内，而我可以避免进一步的错误。&lt;/p&gt; 
&lt;p&gt;我选择&lt;strong&gt;更新&lt;/strong&gt;选项。我选择更新当前模板，然后上传新的模板文件。我确认了参数的当前值。然后，我将所有其他选项保留为当前值，接下来选择&lt;strong&gt;更新堆栈&lt;/strong&gt;。&lt;/p&gt; 
&lt;p&gt;这次，堆栈成功创建，其状态为 &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt;。我可以在&lt;strong&gt;资源&lt;/strong&gt;选项卡中查看所有资源，并在&lt;code&gt;输出&lt;/code&gt;选项卡中查看它们的说明 (基于模板的&lt;strong&gt;输出&lt;/strong&gt;部分)。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-outputs.png"&gt;&lt;img class="aligncenter size-large wp-image-54060" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/18/cfn-outputs-1024x354.png" alt="控制台屏幕截图。" width="1024" height="354"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;以下是模板的最终版本：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-yaml"&gt;AWSTemplateFormatVersion: "2010-09-09"
说明：一个用于解决和修复问题的示例模板
Parameters:
  ShardCountParameter:
    Type: Number
    MinValue: 1
    MaxValue: 10
    说明：Kinesis 流的分区数
Resources:
  MyBucket:
    Type: AWS::S3::Bucket
  MyQueue:
    Type: AWS::SQS::Queue
  MyStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: !Ref ShardCountParameter
  MyTable：
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "ArtistId"
          AttributeType: "S"
        - AttributeName: "Concert"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ArtistId"
          "KeyType": "HASH"
        - AttributeName: "Concert"
          KeyType: "RANGE"
      KinesisStreamSpecification:
        StreamArn: !GetAtt MyStream.Arn
Outputs:
  BucketName:
    Value: !Ref MyBucket
    说明：我的 S3 存储桶的名称
  QueueName:
    Value: !GetAtt MyQueue.QueueName
    说明：我的 SQS 队列的名称
  StreamName:
    Value: !Ref MyStream
    说明：我的 Kinesis 流的名称
  TableName:
    Value: !Ref MyTable
    说明：我的 DynamoDB 表的名称&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;这是一个简单的示例，但从故障点重试堆栈操作的新功能为我节省了大量时间。它可让我快速解决和修复问题，从而减少了反馈循环并增加了在同一时间内完成的迭代次数。除了使用其进行调试之外，该功能对于模板的增量交互式开发也非常有用。对于更复杂的应用程序，我们将可节省大量的时间！&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;使用 AWS CLI 解决和修复 CloudFormation 堆栈问题&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;我可以使用 &lt;a title="" href="https://aws.amazon.com/cli/"&gt;AWS 命令行界面 (CLI)&lt;/a&gt; 保留成功预置的资源，方法是在创建堆栈、更新堆栈或执行更改集时指定 &lt;code&gt;--disable-rollback&lt;/code&gt; 选项。例如：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre class="unlimited-height-code"&gt;&lt;code class="lang-bash"&gt;aws cloudformation create-stack --stack-name my-stack \
    --template-body file://my-template.yaml -–disable-rollback
aws cloudformation update-stack --stack-name my-stack \
    --template-body file://my-template.yaml --disable-rollback
aws cloudformation execute-change-set --stack-name my-stack --change-set-name my-change-set \
    --template-body file://my-template.yaml --disable-rollback&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;对于现有堆栈，我可以查看是否使用 describe stack 命令启用了 &lt;code&gt;DisableRollback&lt;/code&gt; 属性：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre class="unlimited-height-code"&gt;&lt;code class="lang-bash"&gt;aws cloudformation describe-stacks --stack-name my-stack&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;我现在可以更新处于 &lt;code&gt;CREATE_FAILED&lt;/code&gt; 或 &lt;code&gt;UPDATE_FAILED&lt;/code&gt; 状态的堆栈。要手动回滚处于&lt;code&gt;CREATE_FAILED&lt;/code&gt; 或 &lt;code&gt;UPDATE_FAILED&lt;/code&gt; 状态的堆栈，我可以使用新的 rollback stack 命令：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre class="unlimited-height-code"&gt;&lt;code class="lang-bash"&gt;aws cloudformation rollback-stack --stack-name my-stack&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;可用性和定价&lt;br&gt; &lt;/strong&gt;&lt;/span&gt;&lt;a title="" href="https://aws.amazon.com/cloudformation/"&gt;AWS CloudFormation&lt;/a&gt; 从故障点重试堆栈操作的功能在以下 &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regions_az/#Regions"&gt;AWS 区域&lt;/a&gt;免费提供：美国东部 (弗吉尼亚北部、俄亥俄)、美国西部 (俄勒冈、加利福尼亚北部)、AWS GovCloud (美国东部、美国西部)、加拿大 (中部)、欧洲 (法兰克福、爱尔兰、伦敦、米兰、巴黎、斯德哥尔摩)、亚太地区 (香港、孟买、大阪、首尔、新加坡、悉尼、东京)、中东 (巴林)、非洲 (开普敦) 和南美洲 (圣保罗)。&lt;/p&gt; 
&lt;p&gt;您更喜欢使用熟悉的编程语言 (例如 JavaScript、TypeScript、Python、Java、C# 和 Go) 来定义云应用程序资源吗？ 好消息！ &lt;a title="" href="https://aws.amazon.com/cdk/"&gt;AWS Cloud Development Kit (AWS CDK)&lt;/a&gt; 团队计划在接下来的几周内增加对本文中所介绍新功能的支持。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stack-failure-options.html"&gt;借助从故障点开始重试堆栈操作的新功能，可以用更少的时间来解决和修复 CloudFormation 堆栈问题。&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;— &lt;a title="Danilo 的 Twitter" href="https://twitter.com/danilop"&gt;Danilo&lt;/a&gt;&lt;/p&gt;</content:encoded>
										</item>
		<item>
		<title>使用更具体的 Amazon VPC 路由检查子网到子网的流量</title>
		<link>https://aws.amazon.com/cn/blogs/china/inspect-subnet-to-subnet-traffic-with-amazon-vpc-more-specific-routing/</link>
				<pubDate>Fri, 03 Sep 2021 04:30:44 +0000</pubDate>
		<dc:creator><![CDATA[Sébastien Stormacq]]></dc:creator>
				<category><![CDATA[Announcements]]></category>

		<guid isPermaLink="false">308ee0fb555368909267bfb075f24cf12dbcb77e</guid>
				<description>自 2019 年 12 月以来，Amazon Virtual Private Cloud（VPC）允许您将所有进站流量（也称为南北流量）路由到特定网络接口。您可能出于多种原因使用此功能。例如，使用入侵检测系统（IDS）设备检测进站流量或将进站流量路由到防火墙。</description>
								<content:encoded>&lt;p&gt;自 2019 年 12 月以来，&lt;a title="" href="https://aws.amazon.com/vpc/"&gt;Amazon Virtual Private Cloud（VPC）&lt;/a&gt;允许您将所有进站流量（也称为&lt;a href="https://en.wikipedia.org/wiki/North-south_traffic"&gt;南北流量&lt;/a&gt;）路由到特定网络接口。您可能出于多种原因使用此功能。例如，使用入侵检测系统（IDS）设备检测进站流量或将进站流量路由到防火墙。&lt;/p&gt; 
&lt;p&gt;自我们推出此功能以来，许多用户要求我们提供类似的功能来分析从一个子网流向 VPC 内的另一个子网的流量，也称为&lt;a href="https://en.wikipedia.org/wiki/East-west_traffic"&gt;东西流量&lt;/a&gt;。到今天为止，这仍然是不可能的，因为路由表中的路由不能比默认本地路由更具体（有关更多详细信息，请查看&amp;nbsp;&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html"&gt;VPC 文档&lt;/a&gt;）。简单地说，这意味着任何一个路由的目标使用的 &lt;a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing"&gt;CIDR&lt;/a&gt; 范围都不能小于默认本地路由（即整个 VPC 的 CIDR 范围）。例如，当 VPC 范围为 &lt;code&gt;10.0.0/16&lt;/code&gt; 且子网有 &lt;code&gt;10.0.1.0/24&lt;/code&gt; 时，通向 &lt;code&gt;10.0.1.0/24&lt;/code&gt; 的路由比通向 &lt;code&gt;10.0.0/16&lt;/code&gt; 的路由更具体。&lt;/p&gt; 
&lt;p&gt;路由表不再有此限制。路由表中的路由可以有比默认本地路由更具体的路由。您可以使用此类更具体的路由将所有流量发送到专用设备或服务，以检测、分析或过滤两个子网之间的所有流量（东西流量）。路由目标可以是连接到您构建或购买的设备的网络接口（ENI）、出于性能或高可用性原因将流量分配到多个设备的 &lt;a href="https://aws.amazon.com/elasticloadbalancing/gateway-load-balancer/"&gt;AWS 网关负载均衡器&lt;/a&gt;（GWLB）终端节点、&lt;a title="" href="https://aws.amazon.com/firewall-manager/"&gt;AWS Firewall Manager&lt;/a&gt; 终端节点或 &lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html"&gt;NAT 网关&lt;/a&gt;。它还允许在子网和 &lt;a href="https://aws.amazon.com/transit-gateway/"&gt;AWS Transit Gateway&lt;/a&gt; 之间插入设备。&lt;/p&gt; 
&lt;p&gt;可以将设备链接起来，以便在源子网和目标子网之间进行多种类型的分析。例如，您可能希望首先使用防火墙（AWS 托管防火墙或&lt;a href="https://aws.amazon.com/marketplace/solutions/security"&gt;第三方防火墙设备&lt;/a&gt;）筛选流量，然后将流量发送到&lt;a href="https://aws.amazon.com/marketplace/solutions/infrastructure-software/ids-ips"&gt;入侵检测和防御系统&lt;/a&gt;，最后，执行深度数据包检测。您可以从我们的 &lt;a href="https://aws.amazon.com/partners/"&gt;AWS 合作伙伴网络&lt;/a&gt;和 &lt;a href="https://aws.amazon.com/marketplace"&gt;AWS Marketplace&lt;/a&gt; 访问虚拟设备。&lt;/p&gt; 
&lt;p&gt;链接设备时，每个设备和每个终端节点都必须位于单独的子网中。&lt;/p&gt; 
&lt;p&gt;让我们动手试试这个新功能。&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;工作原理&lt;/strong&gt;&lt;/span&gt;&lt;br&gt; 在本博客文章中，我们假设我有一个具有三个子网的 &lt;span title=""&gt;VPC&lt;/span&gt;。第一个子网是公有子网，有一个堡垒主机。它需要访问资源，例如 API 或第二个子网中的数据库。第二个子网是私有子网。它托管堡垒所需的资源。我写了&lt;a href="https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts"&gt;一个简单的 CDK 脚本&lt;/a&gt;来帮助您部署此设置。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/Slide1.png"&gt;&lt;img class="aligncenter wp-image-52363 size-large" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/Slide1-e1621855971954-1024x584.png" alt="更具体的 VPC 路由" width="1024" height="584"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;出于合规性原因，我们公司要求此私有应用程序的流量流经入侵检测系统。&lt;a href="https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts"&gt;CDK 脚本&lt;/a&gt;还创建了第三个子网（私有子网）来托管网络设备。它提供了三个 &lt;a title="" href="https://aws.amazon.com/ec2/"&gt;Amazon Elastic Compute Cloud（Amazon EC2）&lt;/a&gt;实例：堡垒主机、应用程序实例和网络分析设备。该脚本还创建了 NAT 网关，允许引导应用程序实例并使用 &lt;a title="" href="https://aws.amazon.com/systems-manager/"&gt;AWS Systems Manager&lt;/a&gt; Session Manager （SSM）连接到三个实例。&lt;/p&gt; 
&lt;p&gt;因为这是一个演示，所以网络设备是配置为 IP 路由器的常规 Amazon Linux &lt;span title=""&gt;EC2&lt;/span&gt; 实例。在现实生活中，您可能要使用我们的合作伙伴在 &lt;a title="" href="https://aws.amazon.com/marketplace/"&gt;AWS Marketplace&lt;/a&gt; 上提供的众多设备之一，或者&lt;a href="https://aws.amazon.com/elasticloadbalancing/gateway-load-balancer/"&gt;网关负载均衡器&lt;/a&gt;终端节点或 Network Firewall。&lt;/p&gt; 
&lt;p&gt;让我们修改路由表以通过设备发送流量。&lt;/p&gt; 
&lt;p&gt;使用 &lt;a title="" href="https://console.aws.amazon.com"&gt;AWS 管理控制台&lt;/a&gt;或 &lt;a title="" href="https://aws.amazon.com/cli/"&gt;AWS 命令行界面（CLI）&lt;/a&gt;，我向 &lt;code&gt;10.0.0.0/24&lt;/code&gt; 和 &lt;code&gt;10.0.1.0/24&lt;/code&gt; 子网路由表添加了更具体的路由。这些路由指向 &lt;code&gt;eni0&lt;/code&gt;，即流量检测设备的网络接口。&lt;/p&gt; 
&lt;p&gt;使用 CLI，我首先收集设备的 VPC ID、子网 ID、路由表 ID 和 ENI ID。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;VPC_ID=$(aws                                                    \
    --region $REGION cloudformation describe-stacks             \
    --stack-name SpecificRoutingDemoStack                       \
    --query "Stacks[].Outputs[?OutputKey=='VPCID'].OutputValue" \
    --output text)
echo $VPC_ID

APPLICATION_SUBNET_ID=$(aws                                                                      \
    --region $REGION ec2 describe-instances                                                      \
    --query "Reservations[].Instances[] | [?Tags[?Key=='Name' &amp;amp;&amp;amp; Value=='application']].NetworkInterfaces[].SubnetId" \
    --output text)
echo $APPLICATION_SUBNET_ID

APPLICATION_SUBNET_ROUTE_TABLE=$(aws                                                             \
    --region $REGION  ec2 describe-route-tables                                                  \
    --query "RouteTables[?VpcId=='${VPC_ID}'] | [?Associations[?SubnetId=='${APPLICATION_SUBNET_ID}']].RouteTableId" \
    --output text)
echo $APPLICATION_SUBNET_ROUTE_TABLE

APPLIANCE_ENI_ID=$(aws                                                                           \
    --region $REGION ec2 describe-instances                                                      \
    --query "Reservations[].Instances[] | [?Tags[?Key=='Name' &amp;amp;&amp;amp; Value=='appliance']].NetworkInterfaces[].NetworkInterfaceId" \
    --output text)
echo $APPLIANCE_ENI_ID

BASTION_SUBNET_ID=$(aws                                                                         \
    --region $REGION ec2 describe-instances                                                     \
    --query "Reservations[].Instances[] | [?Tags[?Key=='Name' &amp;amp;&amp;amp; Value=='BastionHost']].NetworkInterfaces[].SubnetId" \
    --output text)
echo $BASTION_SUBNET_ID

BASTION_SUBNET_ROUTE_TABLE=$(aws \
 --region $REGION ec2 describe-route-tables \
 --query "RouteTables[?VpcId=='${VPC_ID}'] | [?Associations[?SubnetId=='${BASTION_SUBNET_ID}']].RouteTableId" \
 --output text)
echo $BASTION_SUBNET_ROUTE_TABLE&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;接下来，我会添加两条更具体的路由。一条路由通过设备网络接口将来自堡垒公有子网的流量发送到应用程序私有子网。&amp;nbsp;第二条路由与路由回复的方向相反。它通过设备网络接口将更具体的流量从应用程序私有子网路由到堡垒公有子网。&amp;nbsp;感到困惑？ 让我们看看下图：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/illustration-1.png"&gt;&lt;img class="aligncenter wp-image-52368 size-large" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/24/illustration-1-1024x584.png" alt="更具体的 VPC 路由" width="1024" height="584"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;首先，让我们修改堡垒路由表：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;aws ec2 create-route                                  \
     --region $REGION                                 \
     --route-table-id $BASTION_SUBNET_ROUTE_TABLE     \
     --destination-cidr-block 10.0.1.0/24             \
     --network-interface-id $APPLIANCE_ENI_ID&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;接下来，让我们修改应用程序路由表：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;aws ec2 create-route                                  \
    --region $REGION                                  \
    --route-table-id $APPLICATION_SUBNET_ROUTE_TABLE  \
    --destination-cidr-block 10.0.0.0/24              \
    --network-interface-id $APPLIANCE_ENI_ID&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;我还可以使用 Amazon VPC 控制台进行这些修改。只需从 Routes (路由) 选项卡中选择“Bastion”(堡垒) 路由表，然后单击 Edit routes (编辑路由) 即可。&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-33-52.png"&gt;&lt;img class="aligncenter size-large wp-image-52421" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-33-52-1024x584.png" alt="MSR：选择路由表" width="1024" height="584"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;我添加了一个路由，用于将 &lt;code&gt;10.0.1.0/24&lt;/code&gt;（应用程序子网）的流量发送到设备 ENI（&lt;code&gt;eni-055...&lt;/code&gt;）。&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-35-20.png"&gt;&lt;img class="aligncenter size-large wp-image-52422" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-35-20-1024x494.png" alt="MSR：创建路由" width="1024" height="494"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;下一步是定义相反的回复路由，将 &lt;code&gt;10.0.0.0/24&lt;/code&gt; 的流量从应用程序子网发送到设备 ENI（&lt;code&gt;eni-05...&lt;/code&gt;）。&amp;nbsp;完成后，应用程序子网路由表应如下所示：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-36-34.png"&gt;&lt;img class="aligncenter size-large wp-image-52423" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/05/26/2021-05-26_15-36-34-1024x559.png" alt="MSR：最终路由表" width="1024" height="559"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;配置设备实例&lt;/strong&gt;&lt;/span&gt;&lt;br&gt; 最后，我将设备实例配置为转发其接收的所有流量。您的软件设备通常会为您完成此操作。当您使用 &lt;a title="" href="https://aws.amazon.com/marketplace/"&gt;AWS Marketplace&lt;/a&gt; 设备或&lt;a href="https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts"&gt;我为此演示提供的 CDK 脚本&lt;/a&gt;创建的实例时，无需执行额外步骤。如果您使用的是普通 Linux 实例，请完成以下两个额外步骤：&lt;/p&gt; 
&lt;p&gt;1.连接到 &lt;span title=""&gt;EC2&lt;/span&gt; 设备实例并在内核中配置 IP 流量转发：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;sysctl -w net.ipv4.ip_forward=1
sysctl -w net.ipv6.conf.all.forwarding=1
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;2.将 &lt;span title=""&gt;EC2&lt;/span&gt; 实例配置为接受除本身之外的其他目标的流量（称为&lt;a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_NAT_Instance.html#EIP_Disable_SrcDestCheck"&gt;源/目标检查&lt;/a&gt;）：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;APPLIANCE_ID=$(aws --region $REGION ec2 describe-instances                     \
     --filter "Name=tag:Name,Values=appliance"                                 \
     --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" \
     --output text)

aws ec2 modify-instance-attribute --region $REGION     \
                         --no-source-dest-check        \
                         --instance-id $APPLIANCE_ID&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;测试设置&lt;/strong&gt;&lt;/span&gt;&lt;br&gt; 设备现已做好将流量转发到其他 &lt;span title=""&gt;EC2&lt;/span&gt; 实例的准备。&lt;/p&gt; 
&lt;p&gt;如果您使用的是&lt;a href="https://github.com/sebsto/cdkv2-vpc-example"&gt;演示设置&lt;/a&gt;，则堡垒主机上未安装 SSH 密钥。通过 &lt;a title="" href="https://aws.amazon.com/systems-manager/"&gt;AWS Systems Manager&lt;/a&gt; Session Manager 进行访问。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;BASTION_ID=$(aws --region $REGION ec2 describe-instances                      \
    --filter "Name=tag:Name,Values=BastionHost"                               \
    --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" \
    --output text)

aws --region $REGION ssm start-session --target $BASTION_ID&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;连接到堡垒主机后，发出以下 &lt;code&gt;cURL&lt;/code&gt; 命令以连接到应用程序主机：&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;sh-4.2$ curl -I 10.0.1.239 # use the private IP address of your application host
HTTP/1.1 200 OK
Server: nginx/1.18.0
Date: Mon, 24 May 2021 10:00:22 GMT
Content-Type: text/html
Content-Length: 12338
Last-Modified: Mon, 24 May 2021 09:36:49 GMT
Connection: keep-alive
ETag: "60ab73b1-3032"
Accept-Ranges: bytes&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;要验证流量是否真正流经设备，您可以再次对实例启用源/目标检查。将 &lt;code&gt;--source-dest-check&lt;/code&gt; 参数与上面的 &lt;code&gt;modify-instance-attribute&lt;/code&gt; CLI 命令一起使用。当源/目标检查启用时，流量将受阻。&lt;/p&gt; 
&lt;p&gt;我还可以连接到设备主机并使用 &lt;code&gt;tcpdump&lt;/code&gt; 命令检测流量。&lt;/p&gt; 
&lt;pre&gt;&lt;code class="lang-zsh"&gt;(on your laptop)
APPLIANCE_ID=$(aws --region $REGION ec2 describe-instances     \
                   --filter "Name=tag:Name,Values=appliance" \
		   --query "Reservations[].Instances[?State.Name == 'running'].InstanceId[]" \
  		   --output text)

aws --region $REGION ssm start-session --target $APPLIANCE_ID

(on the appliance host)
tcpdump -i eth0 host 10.0.0.16 # the private IP address of the bastion host

08:53:22.760055 IP ip-10-0-0-16.us-west-2.compute.internal.46934 &amp;gt; ip-10-0-1-104.us-west-2.compute.internal.http: Flags [S], seq 1077227105, win 26883, options [mss 8961,sackOK,TS val 1954932042 ecr 0,nop,wscale 6], length 0
08:53:22.760073 IP ip-10-0-0-16.us-west-2.compute.internal.46934 &amp;gt; ip-10-0-1-104.us-west-2.compute.internal.http: Flags [S], seq 1077227105, win 26883, options [mss 8961,sackOK,TS val 1954932042 ecr 0,nop,wscale 6], length 0
08:53:22.760322 IP ip-10-0-1-104.us-west-2.compute.internal.http &amp;gt; ip-10-0-0-16.us-west-2.compute.internal.46934: Flags [S.], seq 4152624111, ack 1077227106, win 26847, options [mss 8961,sackOK,TS val 4094021737 ecr 1954932042,nop,wscale 6], length 0
08:53:22.760329 IP ip-10-0-1-104.us-west-2.compute.internal.http &amp;gt; ip-10-0-0-16.us-west-2.compute.internal.46934: Flags [S.], seq 4152624111, ack 1077227106, win 26847, options [mss &lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style="text-decoration: underline"&gt;&lt;strong&gt;清理&lt;/strong&gt;&lt;/span&gt;&lt;br&gt; 如果您使用了&lt;a href="https://github.com/sebsto/cdkv2-vpc-example/blob/main/lib/specific-routing-demo-stack.ts"&gt;我为此博文提供的 CDK 脚本&lt;/a&gt;，请务必在完成后运行 &lt;code&gt;cdk destroy&lt;/code&gt;，这样就无需为我用于此演示的三个 EC2 实例和 NAT 网关付费。在 &lt;code&gt;us-west-2&lt;/code&gt; 中运行演示脚本的&lt;a href="https://calculator.aws/#/estimate?id=a460f21b3c6a0e271aae860ce4482c02389747bd"&gt;费用&lt;/a&gt;为每小时 0.062 美元。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style="text-decoration: underline"&gt;注意事项。&lt;/span&gt;&lt;/strong&gt;&lt;br&gt; 在使用更具体的 &lt;span title=""&gt;VPC&lt;/span&gt; 路由时，请记住以下几点：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;您要向其发送流量的网络接口或服务终端节点必须位于专用子网中。它不能位于流量的源子网或目标子网中。&lt;/li&gt; 
 &lt;li&gt;您可以将设备链接起来。每台设备必须位于其专用子网中。&lt;/li&gt; 
 &lt;li&gt;您添加的每个子网都会占用一个 IP 地址块。&amp;nbsp;如果您使用的是 IPv4，请注意所用的 IP 地址数量（一个 /24 子网使用来自您的 VPC 的 256 个地址）。子网中允许的最小 CIDR 范围是 /28，它只使用 16 个 IP 地址。&lt;/li&gt; 
 &lt;li&gt;设备的安全组必须有规则接受所需端口上的传入流量。同样，应用程序的安全组必须授权来自设备安全组或 IP 地址的流量。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;此新功能在所有 AWS 区域均可使用，无需额外付费。&lt;/p&gt; 
&lt;p&gt;您可以立即开始使用。&lt;/p&gt;</content:encoded>
										</item>
		<item>
		<title>Amazon Textract 更新：8 个亚马逊云科技区域的价格降幅达 32％，异步任务处理时间缩短近 50％</title>
		<link>https://aws.amazon.com/cn/blogs/china/amazon-textract-updates-up-to-32-price-reduction-in-8-aws-regions-and-up-to-50-reduction-in-asynchronous-job-processing-times/</link>
				<pubDate>Fri, 03 Sep 2021 04:28:17 +0000</pubDate>
		<dc:creator><![CDATA[Channy Yun]]></dc:creator>
				<category><![CDATA[Price Reduction]]></category>

		<guid isPermaLink="false">1d79dcc8d4d08e74c3b32607ec6ca943b1d1b3b6</guid>
				<description>在亚马逊云科技 re:Invent 2018 上推出的 Amazon Textract 是一项机器学习服务，它可以从扫描的文档中自动提取文本、手写和数据，并超越了简单的光学字符识别 (OCR) 来识别、理解和提取表单和表格中的数据。</description>
								<content:encoded>&lt;p&gt;在亚马逊云科技 re:Invent 2018 上推出的 &lt;a href="https://aws.amazon.com/textract/"&gt;Amazon Textract&lt;/a&gt; 是一项机器学习服务，它可以从扫描的文档中自动提取文本、手写和数据，并超越了简单的光学字符识别 (OCR) 来识别、理解和提取表单和表格中的数据。&lt;/p&gt; 
&lt;p&gt;在过去的几个月中，我们推出了处理&lt;a href="https://aws.amazon.com/blogs/machine-learning/announcing-expanded-support-for-extracting-data-from-invoices-and-receipts-using-amazon-textract/"&gt;发票和收据&lt;/a&gt;的专业技术支持，并提高了基础计算机视觉模型的质量，该模型支持&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-improvements-detection-handwritten-text-digits-dates-phone-numbers/"&gt;手写文本&lt;/a&gt;、&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/06/amazon-textract-announces-quality-updates-to-its-forms-extraction-feature/"&gt;表单&lt;/a&gt;和&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/04/amazon-textract-announces-quality-update-table-extraction-feature/"&gt;表格&lt;/a&gt;的提取，并支持英语、西班牙语、德语、意大利语、葡萄牙语和法语的打印文本。&lt;/p&gt; 
&lt;p&gt;作为多个亚马逊云科技合规性计划的一部分，第三方审计员将评估 Amazon Textract 的安全性和合规性。我们还添加了 &lt;a href="https://aws.amazon.com/blogs/security/new-2021-h1-irap-report-is-now-available-on-aws-artifact-for-australian-customers/"&gt;IRAP&lt;/a&gt; 合规性技术支持并实现 &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/04/amazon-textract-achieves-fedramp-compliance/"&gt;US FedRAMP&lt;/a&gt; 授权，以添加到现有的列表中，如 &lt;a href="https://aws.amazon.com/about-aws/whats-new/2019/10/amazon-textract-is-now-a-hipaa-eligible-service/"&gt;HIPAA&lt;/a&gt;、&lt;a href="https://aws.amazon.com/about-aws/whats-new/2019/12/amazon-textract-is-now-pci-dss-certified-and-extracts-even-more-data-from-tables-and-forms/"&gt;PCI DSS&lt;/a&gt;、&lt;a href="https://aws.amazon.com/about-aws/whats-new/2020/06/amazon-textract-is-now-soc-and-iso-compliant/?nc1=h_ls"&gt;ISO SCO&lt;/a&gt; 和 &lt;a href="https://aws.amazon.com/blogs/security/aws-extends-its-mtcs-level-3-certification-scope-to-cover-united-states-regions/"&gt;MTCS&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;&lt;img class="aligncenter size-full wp-image-54262" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/24/2021-textract-price-reduction.png" alt="" width="2018" height="546"&gt;&lt;/p&gt; 
&lt;p&gt;客户使用 Amazon Textract 自动执行关键业务流程工作流（例如，在索赔和纳税表处理、贷款申请和应付账款方面）。这样可以缩短人工审核时间、提高准确性、降低成本并加快全球范围的创新步伐。与此同时，&lt;a href="https://aws.amazon.com/textract/customers/"&gt;Textract 客户&lt;/a&gt;告诉我们，我们可以做更多的工作来降低成本和改善延迟现象。&lt;/p&gt; 
&lt;p&gt;今天，我们很高兴地宣布对 Amazon Textract 的两项主要更新：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;8 个亚马逊云科技区域的价格降幅达 32%，帮助&lt;/strong&gt;全球客户通过 Textract 节省更多成本。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;Textract 全球&lt;/strong&gt;异步操作的端到端任务处理时间减少近 50%。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;&lt;u&gt;8 个亚马逊云科技区域的价格降幅达 32％&lt;/u&gt;&lt;/strong&gt;&lt;br&gt; 我们很高兴地宣布，8 个亚马逊云科技区域的价格降幅达 32％：亚太地区（孟买）、亚太地区（首尔）、亚太地区（新加坡）、亚太地区（悉尼）、加拿大（中部）、欧洲（法兰克福）、欧洲（伦敦）和欧洲（巴黎）。&lt;/p&gt; 
&lt;p&gt;这些亚马逊云科技区域中 &lt;code&gt;DetectDocumentText&lt;/code&gt; (OCR) 和 &lt;code&gt;AnalyzeDocument&lt;/code&gt;（表单和表格）的 API 定价现在与美国东部（弗吉尼亚北部）区域的定价相同。这些已确定区域的客户将看到 API 定价下降 9-32％。&lt;/p&gt; 
&lt;p&gt;在降价之前，客户对 &lt;code&gt;DetectDocumentText&lt;/code&gt; 和 &lt;code&gt;AnalyzeDocument&lt;/code&gt; API 的使用情况将按不同的费率、按区域及其使用套餐收费。无论从哪个亚马逊云科技商业区域 Textract 调用，现在都将按同样的费率向该客户收费。&lt;/p&gt; 
&lt;table style="width: 100%;border: 1px solid black;border-collapse: collapse;margin-left: auto;margin-right: auto;text-align: right"&gt; 
 &lt;tbody&gt; 
  &lt;tr style="border: 1px solid black;background-color: #eee"&gt; 
   &lt;td style="text-align: center;border: 1px solid black" rowspan="2"&gt;&lt;strong&gt;亚马逊云科技区域&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="text-align: center;border: 1px solid black" colspan="3"&gt;&lt;strong&gt;DetectDocumentText API&lt;/strong&gt;&lt;/td&gt; 
   &lt;td style="text-align: center;border: 1px solid black" colspan="3"&gt;&lt;strong&gt;AnalyzeDocument API&lt;/strong&gt;&lt;strong&gt;（表单+表格）&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: center"&gt;原价格&lt;/td&gt; 
   &lt;td style="border: 1px solid black;text-align: center"&gt;新价格&lt;/td&gt; 
   &lt;td style="border: 1px solid black;text-align: center"&gt;减少&lt;/td&gt; 
   &lt;td style="border: 1px solid black;text-align: center"&gt;原价格&lt;/td&gt; 
   &lt;td style="border: 1px solid black;text-align: center"&gt;新价格&lt;/td&gt; 
   &lt;td style="border: 1px solid black;text-align: center"&gt;减少&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;亚太地区（孟买）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;1.830 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black" rowspan="8"&gt;1.50 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;18%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;79.30 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black" rowspan="8"&gt;65.0 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;18%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;亚太地区（首尔）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;1.845 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;19%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;79.95 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;19%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;亚太地区（新加坡）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;2.200 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;32%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;95.00 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;32%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;亚太地区（悉尼）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;1.950 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;23%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;84.50 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;23%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;加拿大（中部）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;1.655 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;9%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;72.15 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;10%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;欧洲（法兰克福）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;1.875 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;20%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;81.25 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;20%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;欧洲（伦敦）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;1.750 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;14%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;75.00 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;13%&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr style="border: 1px solid black"&gt; 
   &lt;td style="border: 1px solid black;text-align: left"&gt;欧洲（巴黎）&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;1.755 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;15%&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;76.05 美元&lt;/td&gt; 
   &lt;td style="border: 1px solid black"&gt;15%&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;此表显示了每 1,000 页的两个有效价格示例，用于在降价之前和之后处理前 100 万个按月填的页面。每月页面使用量超过 100 万个套餐的客户还会看到类似的价格下降信息，其详细信息位于 &lt;a href="https://aws.amazon.com/textract/pricing/"&gt;Amazon Textract 定价页面&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;新定价将于 &lt;strong&gt;2021 年 9 月 1 日&lt;/strong&gt;生效。新价格将自动应用于您的账单。此定价变更不适用于欧洲（爱尔兰）、美国商业区域和美国 GovCloud 区域。近期推出的 &lt;code&gt;AnalyzeExpense&lt;/code&gt; API 发票和收据的定价没有任何变化。&lt;/p&gt; 
&lt;p&gt;作为&lt;a href="https://aws.amazon.com/free/"&gt;亚马逊云科技免费套餐&lt;/a&gt;的一部分，您可以免费开始使用 Amazon Textract。&amp;nbsp;免费套餐持续 3 个月，新的 AWS 客户可以使用 Detect Document Text API 每月分析多达 1,000 页，使用 Analyze Document API 或 Analyze Expense API 每月可分析 100 页。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;&lt;u&gt;端到端任务处理时间减少近 50％&lt;/u&gt;&lt;/strong&gt;&lt;br&gt; 客户可以同步（在单页文档中）和异步（在多页文档中）调用 Textract 来检测打印和手写的行和单词（通过 &lt;code&gt;DetectDocumentText &lt;/code&gt;API）以及提取表单和表格（通过 &lt;code&gt;AnalyzeDocument&lt;/code&gt; API）。我们看到，如今绝大多数客户异步调用 Textract 来对他们的文档管道进行大规模处理。&lt;/p&gt; 
&lt;p&gt;根据客户反馈，我们对 Textract 的异步 API 操作进行了多项改善和提高，这些功能将端到端延迟减少了近 50％。具体而言，这些更新将 Textract 客户在全球异步操作中经历的端到端任务处理时间缩短了近 50％。处理时间越短，客户处理文档、实现规模和提高总体生产力的速度就越快。&lt;/p&gt; 
&lt;p&gt;要深入了解 Amazon Textract，请参阅本&lt;a href="https://aws.amazon.com/getting-started/hands-on/extract-text-with-amazon-textract/"&gt;教程中关于从文档&lt;/a&gt;中提取文本和结构性数据、GitHub 中的&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples"&gt;此代码示例&lt;/a&gt;、&lt;a href="https://docs.aws.amazon.com/textract/"&gt;Amazon Textract 文档&lt;/a&gt;，以及 Amazon Web Services Machine Learning 博客&lt;a href="https://aws.amazon.com/blogs/machine-learning/category/artificial-intelligence/amazon-textract/"&gt;中关于 Amazon Textract 的&lt;/a&gt;博客帖子。&lt;/p&gt; 
&lt;p&gt;– &lt;a href="https://twitter.com/channyun"&gt;Channy&lt;/a&gt;&lt;/p&gt;</content:encoded>
										</item>
		<item>
		<title>Announcing the latest AWS Heroes – August 2021</title>
		<link>https://aws.amazon.com/cn/blogs/china/announcing-the-latest-aws-heroes-august-2021/</link>
				<pubDate>Fri, 03 Sep 2021 04:09:00 +0000</pubDate>
		<dc:creator><![CDATA[Ross Barich]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">07b49b3d09f57f003e99de21de38d56a06c40a92</guid>
				<description>AWS 勇士们不遗余力地与社群分享知识，并帮助其他人在 AWS 上更好、更快地进行构建。上个月，我们推出了 AWS 勇士内容库，这是一个资源汇集之地，构建者可以在这里找到灵感并从 AWS 勇士撰写的教学内容中学习，包括博客、视频、幻灯片演示、播客、开源项目等。随着技术社群的日益发展，新的勇士不断涌现，每个季度我们都会表彰来自世界各地的一群杰出人士，他们对社群知识的共享产生重大影响，并受到高度赞赏。</description>
								<content:encoded>&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/" target="_blank" rel="noopener noreferrer"&gt;AWS 勇士们&lt;/a&gt;不遗余力地与社群分享知识，并帮助其他人在 AWS 上更好、更快地进行构建。上个月，我们推出了 &lt;a href="https://aws.amazon.com/developer/community/heroes/content-library/" target="_blank" rel="noopener noreferrer"&gt;AWS 勇士内容库&lt;/a&gt;，这是一个资源汇集之地，构建者可以在这里找到灵感并从 AWS 勇士撰写的教学内容中学习，包括博客、视频、幻灯片演示、播客、开源项目等。随着技术社群的日益发展，新的勇士不断涌现，每个季度我们都会表彰来自世界各地的一群杰出人士，他们对社群知识的共享产生重大影响，并受到高度赞赏。&lt;/p&gt; 
&lt;p&gt;今天，我们很高兴地介绍最新的 AWS 勇士们，包括位于喀麦隆和马来西亚的首批勇士：&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Denis Astahov – 加拿大温哥华&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/denis-astahov/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/19/denis-astahov.jpg" width="175" height="263"&gt;&lt;/a&gt;社群勇士 &lt;a href="https://aws.amazon.com/developer/community/heroes/denis-astahov/" target="_blank" rel="noopener noreferrer"&gt;Denis Astahov&lt;/a&gt; 是 OpsGuru 的一名解决方案构架师，在那里，他使用 Terraform 利用基础设施即代码自动化和开发各种云解决方案。Denis 拥有 YouTube 频道 ADV-IT，他通过该频道向人们讲授各种 IT 知识，尤其是有关 DevOps 的话题，包括 AWS、Terraform、Kubernetes、Ansible、Jenkins、Git、Linux、Python 及许多其他主题。他的频道拥有 7 万多个订阅者和 700 多万观看次数，使其成为俄语社群中 AWS 和 DevOps 知识最受欢迎的免费来源之一。Denis 拥有 10 多项云认证，其中包括 7 项 AWS Certification。&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Ivonne Roberts — 美国坦帕&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/ivonne-roberts/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/19/ivonne-roberts.jpg" width="175" height="263"&gt;&lt;/a&gt;无服务器勇士&lt;a href="https://aws.amazon.com/developer/community/heroes/ivonne-roberts/" target="_blank" rel="noopener noreferrer"&gt; Ivonne Roberts&lt;/a&gt; 是一名首席软件工程师，拥有逾 15 年的软件开发经验，其中包括十年与 AWS 合作的经验以及五年以上构建无服务器应用程序的经验。近年来，Ivonne 已开始与范围更广的软件工程界分享这些行业知识。在其博客 ivonneroberts.com 和 YouTube 频道 DevWidgets 上，Ivonne 专注于揭开采用无服务器架构的神秘面纱并消除障碍，以及简化软件开发生命周期。&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Kaushik Mohanraj — 马来西亚吉隆坡&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/kaushik-mohanraj/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/19/kaushik-mohanraj.jpg" width="175" height="263"&gt;&lt;/a&gt;社群勇士&lt;a href="https://aws.amazon.com/developer/community/heroes/kaushik-mohanraj/" target="_blank" rel="noopener noreferrer"&gt; Kaushik Mohanraj&lt;/a&gt; 是马来西亚一家名为 Blazeclan Technologies 的公司的董事。Kaushik 是一位狂热的云从业者，在评估架构良好的解决方案方面拥有丰富的经验，并且是云技术和数字化转型大使。Kaushik 持有 10 项有效的 AWS Certification，这有助于他提供最有针对性且且最佳的解决方案。Kaushik 热衷于打造一个他得以在其中充分发展的社群，因此在 2019 年作为联合组织者加入了马来西亚 AWS 用户组。他还是“大数据中的女性 — 马来西亚分会”的联合总监，旨在为科技领域的女性构建和提供一个平台。&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Luc van Donkersgoed — 荷兰乌得勒支&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/luc-van-donkersgoed/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/19/luc-van-donkersgoed.jpg" width="175" height="263"&gt;&lt;/a&gt;DevTools 勇士&lt;a href="https://aws.amazon.com/developer/community/heroes/luc-van-donkersgoed/" target="_blank" rel="noopener noreferrer"&gt; Luc van Donkersgoed&lt;/a&gt; 在内心里是一位技术狂热爱好者，他是一名解决方案构架师、软件开发人员，同时也是一位企业家。他着迷于尖端技术。不在 AWS 上设计和构建强大的应用程序时， Luc 很可能正在博客、文章、视频、会议、培训课程和 Twitter 上分享知识。他撰写了一个 共16 节课的 AWS 解决方案构架师专业课程，内容涉及各种主题，包括 AWS CDK 将如何助力新一代无服务器开发人员，他也曾出现在 AWS 开发人员播客中，同时他也在维护 AWS 博客 Twitter Bot。&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Rick Hwang — 台湾台北市&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/rick-hwang/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/19/rick-hwang.jpg" width="175" height="263"&gt;&lt;/a&gt;社群勇士&lt;a href="https://aws.amazon.com/developer/community/heroes/rick-hwang/" target="_blank" rel="noopener noreferrer"&gt; Rick Hwang&lt;/a&gt; 是位于台湾的 91APP 的一名云与基础设施架构师。他为开发人员授课的热情已在内部通过年度 AWS 培训项目负责人的身份得以彰显，在外部又通过 SRE Taiwan 社群拥有者的身份得以证明。Rick 独立创办了 SRE Taiwan，在过去的 4 年里，通过点对点互动、不断分享内容和主办年度学习小组聚会，招募了 3,600 多名成员。Rick 乐于帮助人们加深对 AWS 和整个云的了解。&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Rosius Ndimofor — 喀麦隆杜阿拉&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/rosius-ndimofor/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/23/rosius-ndimofor.jpg" width="175" height="263"&gt;&lt;/a&gt;无服务器勇士&lt;a href="https://aws.amazon.com/developer/community/heroes/rosius-ndimofor/" target="_blank" rel="noopener noreferrer"&gt; Rosius Ndimo&lt;/a&gt; 是 Serverless Guru 的一名软件开发人员。8 年来，他始终在为各种客户构建桌面、Web 和移动应用程序。2020 年，Rosius 的朋友向他介绍了 AWS，他随即便被吸引住了，并开始尽可能地学习如何构建 AWS 无服务器应用程序。您会看到 Rosius 在当地每月一次的 AWS 聚会活动中发表演讲，或者从事他的强项：构建无服务器 Web 或移动应用程序并在其博客上记录整个过程。&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Setia Budi — 印度尼西亚万隆&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/setia-budi/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/19/setia-budi.jpg" width="175" height="263"&gt;&lt;/a&gt;社群勇士&lt;a href="https://aws.amazon.com/developer/community/heroes/setia-budi/" target="_blank" rel="noopener noreferrer"&gt; Setia Budi&lt;/a&gt; 是一名来自印度尼西亚的学者。他经营着一个名为 Indonesia Belajar 的 YouTube 频道，该频道提供与计算机科学和云计算相关的学习资料（以印度尼西亚语提供）。他对 AWS 社区的热情还体现在他在 AWS DevAx Connect 上发表演讲，他正在积极构建一系列与 AWS 服务相关的学习材料，并每周直播 AWS 专家探论云计算的直播会议。&lt;/p&gt; 
&lt;h2 style="clear: both"&gt;Vinicius Caridá — 巴西圣保罗&lt;/h2&gt; 
&lt;p&gt;&lt;a href="https://aws.amazon.com/developer/community/heroes/vinicius-carida/" target="_blank" rel="noopener noreferrer"&gt;&lt;img class="alignleft" src="https://d2908q01vomqb2.cloudfront.net/da4b9237bacccdf19c0760cab7aec4a8359010b0/2021/08/20/vinicius-carida.jpg" width="175" height="263"&gt;&lt;/a&gt;机器学习勇士&lt;a href="https://aws.amazon.com/developer/community/heroes/vinicius-carida/" target="_blank" rel="noopener noreferrer"&gt; Vinicius Caridá（Vini）&lt;/a&gt;是一名计算机工程师，他相信技术、数据和人工智能可以影响人们，进而创造一个更公平、更进步的世界。他喜欢在社交媒体上、YouTube 频道上以及 AWS 圣保罗用户组（他是社群主管）等各种聚会上分享自己关于 AI、NLP 和 MLOps 的知识。Vini 还是开源机器学习框架 TensorFlow 圣保罗的社群主管。他定期参加会议，并为不同背景（学术界、科学界、技术界）和不同成熟程度（初级、中级和高级）的受众撰写文章。&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;如果您想了解有关这些新勇士的详情，或者与附近的勇士联系，请访问 &lt;a href="https://aws.amazon.com/developer/community/heroes/" target="_blank" rel="noopener noreferrer"&gt;AWS 勇士网站&lt;/a&gt;或浏览 &lt;a href="https://aws.amazon.com/developer/community/heroes/content-library/" target="_blank" rel="noopener noreferrer"&gt;AWS 勇士内容库&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;— &lt;a href="https://twitter.com/rossbarich" target="_blank" rel="noopener noreferrer"&gt;Ross&lt;/a&gt;；&lt;/p&gt;</content:encoded>
										</item>
		<item>
		<title>通过亚马逊云科技Marketplace中合作伙伴（Zenlayer）的产品来加速Amazon S3的访问</title>
		<link>https://aws.amazon.com/cn/blogs/china/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace/</link>
				<pubDate>Fri, 03 Sep 2021 03:59:58 +0000</pubDate>
		<dc:creator><![CDATA[AWS Team]]></dc:creator>
				<category><![CDATA[Artificial Intelligence]]></category>
		<category><![CDATA[Marketplace]]></category>

		<guid isPermaLink="false">19e4e87c516f11f5d35a00626639a9bb0cda9724</guid>
				<description>AWS Marketplace 是一个精挑细选的数字化产品目录，您可以使用它来查找、购买、部署和管理构建解决方案及运营业务所需的第三方软件、数据和服务。 AWS Marketplace 囊括了众多常见类别下的数千个软件名录，例如安全、联网、存储、机器学习、IoT、商业智能、数据库和开发运营。 AWS Marketplace 还提供灵活的定价选项和多种部署方法，从而简化了软件的许可和采购。此外, AWS Marketplace 包括 AWS Data Exchange 提供的数据产品。</description>
								<content:encoded>&lt;h2&gt;1.&amp;nbsp;&amp;nbsp; 相关服务及背景介绍&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Amazon S3&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Amazon Simple Storage Service (Amazon S3) 是一种面向 Internet 的存储服务。该服务旨在降低网络规模计算的难度。&lt;/p&gt; 
&lt;p&gt;Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施，Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Amazon CloudFront&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;Amazon CloudFront 是一项加快将静态和动态 Web 内容（例如 .html、.css、.js 和图像文件）分发给用户的速度的 Web 服务。CloudFront 通过全球数据中心（称作边缘站点）网络传输内容。当用户请求您用 CloudFront 提供的内容时，请求被路由到提供最低延迟（时间延迟）的边缘站点，从而以尽可能最佳的性能传送内容。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;亚马逊云科技&lt;/strong&gt;&lt;strong&gt;Marketplace&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;AWS Marketplace 是一个精挑细选的数字化产品目录，您可以使用它来查找、购买、部署和管理构建解决方案及运营业务所需的第三方软件、数据和服务。 AWS Marketplace 囊括了众多常见类别下的数千个软件名录，例如安全、联网、存储、机器学习、IoT、商业智能、数据库和开发运营。 AWS Marketplace 还提供灵活的定价选项和多种部署方法，从而简化了软件的许可和采购。此外, AWS Marketplace 包括 AWS Data Exchange 提供的数据产品。&lt;/p&gt; 
&lt;p&gt;您只需几次单击即可快速启动预配置的软件，并可选择 Amazon 系统映像 (AMI) 和软件即服务 (SaaS) 格式以及其他格式的软件解决方案。此外，您还可以浏览和订阅数据产品。灵活的定价选项包括免费试用、每小时、每月、每年、多年和自带许可 (BYOL) 模式。所有这些定价选项都从一个来源计费。AWS 会处理账单和付款，费用将显示在您的 AWS 账单上。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;应用系统或最终用户对于&lt;/strong&gt;&lt;strong&gt;S3对象的访问需求&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;由于Amazon S3的灵活性与可靠性，亚马逊云科技的许多客户都使用S3用于对象的存储，Amazon S3可以用于多种用途，比如数据湖的底层存储、备份文件的存储、日志的收集存储等。&lt;/p&gt; 
&lt;p&gt;除此之外，许多应用系统也会使用S3作为底层的存储之一，比如一些在线商城系统或者社交系统，会将图片等静态文件存储在Amazon S3之中，而系统的架构设计可能需要最终访问用户通过联合认证后获得相应的角色权限去访问这些位于Amazon S3中的对象。&lt;/p&gt; 
&lt;p&gt;应用系统在进行全球化的布局过程中，往往需要适用于全球化的客户，这些客户的地理位置较为分散，尤其一些位于偏远或特殊区域的客户，他们可能离应用系统或者Amazon S3所处的区域较远或无法通过亚马逊云科技底层网络到达，这时广域化的互联网会造成较大的延迟和不稳定，这会导致部分用户的体验下降或应用程序无法正常运作。&lt;/p&gt; 
&lt;h2&gt;2.&amp;nbsp;&amp;nbsp; ZGA（Global Accelerator）功能介绍&lt;/h2&gt; 
&lt;p&gt;Zenlayer Global Accelerator为全球用户提高了应用程序的可用性和性能。即时加速用户对应用程序、网站和/或在线平台的访问，包括高动态内容（如实时流媒体和播放器操作）或安全操作（如用户身份验证和支付）。&lt;/p&gt; 
&lt;p&gt;我们的合作伙伴的平台利用180多个边缘位置、专用全球主干网和先进的智能路由技术实现与客户的高速连接，消除延迟和数据包丢失，即使在“最后一英里”也不例。ZGA拥有稳定的高速连接，安全的防护，并采用拥有骨干网络和智能路由技术的全球节点，使用户能够通过接入最近的节点来实现高速连接访问源站，消除跨境跨域访问过程里用户经常遇到的网页加载慢、通讯的延迟以及卡顿。&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;联合解决方案优势 ：&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;直接通过VBR对接亚马逊云科技源站，中间节点与节点之间全程骨干网络 ，回源更迅速稳定，隐私性+性能双保障。&lt;/li&gt; 
 &lt;li&gt;通过智能解析和全球调度系统为用户选取最优最近的接入方式 。&lt;/li&gt; 
 &lt;li&gt;支持IP/域名加速。支持http，https，WebSocket，WSS，FTP，SSH，TCP/UDP等多种协议。支持自定义端口及支持私有协议。&lt;/li&gt; 
 &lt;li&gt;支持源站负载均衡及实时监控，SSL加密传输，黑白名单及IP ALC等功能保护源站安全。&lt;/li&gt; 
 &lt;li&gt;操作简便，交付敏捷。通过亚马逊云科技Marketplace可以直接试用和购买合作伙伴的产品，加速平台配备了配置界面，只需几分钟就可以将客户接入加速。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;3.&amp;nbsp;&amp;nbsp; ZGA优化Amazon S3常用架构&lt;/h2&gt; 
&lt;p&gt;客户在亚马逊云科技的某个Region上使用了S3服务，期望可以覆盖全球各地用户的访问&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace1.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace1.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; ZGA加速S3常用架构&lt;/p&gt; 
&lt;p&gt;对于可控的用户，固定办公场所可以安装网关就近连接到Zenlayer的边缘POP，获取S3的流量送到全球骨干进行加速。移动用户安装客户端，随时体验S3加速效果。&lt;/p&gt; 
&lt;p&gt;而对于无法安装硬件网关或客户端的用户，可以直接访问由Zenlayer提供的域名(如：www.xxx.com)替代S3原本的域名，通过Zenlayer全球智能DNS解析服务，自动将访问S3的流量牵引至就近POP，再通过全球骨干转发到距离S3源站最近的POP进行转发，实现对S3的加速.&lt;/p&gt; 
&lt;h2&gt;4.&amp;nbsp;&amp;nbsp; ZGA集成Amazon Cloudfront加速全球S3&lt;/h2&gt; 
&lt;p&gt;客户在亚马逊云科技上使用了Amazon S3服务，并在部分节点使用了Amazon CloudFront覆盖当地客户，但当最终用户的某些区域不在CloudFront覆盖范围内，无法让这些用户都快速的访问S3上的内容。&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace2.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace2.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 例如：&lt;/p&gt; 
&lt;p&gt;用户在美国东部署了S3源站，通过CloudFront服务加速东南亚用户，CloudFront东南亚节点选择在新加坡，本地使用者访问质量得到了优化，但东南亚其它地区的使用者通过互联网访问到CloudFront新加坡节点时体验不佳，导致整体访问效果不好。&lt;/p&gt; 
&lt;p&gt;ZGA的方案会提供给用户一个额外的URL地址，客户在域名控制平台使用该地址替换CloudFront的CNAME地址，使用者在访问S3域名时，通过智能DNS的解析，会判断出CloudFront无法覆盖的地址，并将这些流量会返回Zenlayer边缘POP的IP地址，如泰国、菲律宾、印尼等，流量就近接入后再通过全球骨干送到新加坡的CloudFront节点，最终由CloudFront节点经亚马逊云科技转发到美国源站，动态快速的扩充了CloudFront的全球覆盖能力。&lt;/p&gt; 
&lt;h2&gt;5.&amp;nbsp;&amp;nbsp; ZGA加速S3在不同Region的传输&lt;/h2&gt; 
&lt;p&gt;用户在亚马逊云科技的多个Region都是用了Amazon S3的服务，不同Region间的S3需要做数据同步。&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace3.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace3.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; Zenlayer向客户在亚马逊云科技中不同的Region发起DX连接，按照就近选择原则，通过最近的POP打通到客户不同Region的连接；&lt;/p&gt; 
&lt;p&gt;由于S3不属于Private服务，客户需要建立Public VIF并绑定到VGW，建立到Zenlayer骨干网的连接通道；&lt;/p&gt; 
&lt;p&gt;不同的Region通过BGP communities控制BGP宣告的路由信息，只发布本Region的所有public IP，Zenlayer通过DX连接将两个区域的路由同步；&lt;/p&gt; 
&lt;p&gt;使用亚马逊云科技的S3数据同步功能进行数据的复制时，会依据路由规则通过Zenlayer骨干完成传输；&lt;/p&gt; 
&lt;h2&gt;6.&amp;nbsp;&amp;nbsp; 如何通过亚马逊云科技Marketplace来交付ZGA&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;合约产品下单&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;步骤一: 打开 &lt;a href="https://aws.amazon.com/marketplace/pp/B08RNQC2WJ"&gt;https://aws.amazon.com/marketplace/pp/B08RNQC2WJ&lt;/a&gt; 后，点击 “Continue to Subscribe” 按钮&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace4.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace4.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤二: 选择合约期限和续约设置&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace5.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace5.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤三: 选择您所需要的带宽步骤二: 选择合约期限和续约设置&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace6.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace6.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤四: 点击“Create Contract” 按钮来创建合约&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace7.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace7.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤五: 支付此合约&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace8.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace8.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤六: 点击 “Setup your account“ 按钮设置您的账户，之后将会进入到Zenlayer的Portal网址&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace9.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace9.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤七: 开始注册Zenlayer账户，可继续遵循用户指导步骤&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace10.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace10.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;订阅产品下单&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;步骤一: 打开 &lt;a href="https://aws.amazon.com/marketplace/pp/B08S3F2PCF"&gt;https://aws.amazon.com/marketplace/pp/B08S3F2PCF&lt;/a&gt; 后，点击 “Continue to Subscribe” 按钮&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace11.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace11.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤二: 确认按流量收费价格后点击“Subscribe” 按钮&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace12.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace12.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤三: 点击“Setup your account“ 按钮进入到Zenlayer Portal网站设置您的账户步骤二: 确认按流量收费价格后点击“Subscribe” 按钮&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace13.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace13.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 步骤四: 开始注册Zenlayer账户，可继续遵循用户指导步骤&lt;br&gt; &lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace14.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/accelerate-the-access-of-amazon-s3-through-the-products-of-the-partner-zenlayer-in-the-amazon-cloud-technology-marketplace14.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;7.&amp;nbsp;&amp;nbsp; 小结步骤四: 开始注册Zenlayer账户，可继续遵循用户指导步骤&lt;/h2&gt; 
&lt;p&gt;通过本文的介绍，您应该初步了解了如何通过亚马逊云科技以及合作伙伴Zenlayer的联合解决方案来加速您的应用以及终端用户对于Amazon S3中对象的访问，以及如果通过亚马逊云科技Marketplace来对合作伙伴的产品进行试用和购买，如果您需要更多的信息，可以参考亚马逊云科技Marketplace官方文档以及合作伙伴官方网站。&lt;/p&gt; 
&lt;h2&gt;&lt;/h2&gt; 
&lt;h2&gt;本篇作者&lt;/h2&gt; 
&lt;footer&gt; 
 &lt;div class="blog-author-box"&gt; 
  &lt;div class="blog-author-image"&gt;
   &lt;img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/Author/mingyue.jpg" width="125"&gt;
  &lt;/div&gt; 
  &lt;h3 class="lb-h4"&gt;张明月&lt;/h3&gt; 
  &lt;p&gt;合作伙伴解决方案架构师&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/footer&gt; 
&lt;h2&gt;&lt;/h2&gt; 
&lt;footer&gt; 
 &lt;div class="blog-author-box"&gt; 
  &lt;div class="blog-author-image"&gt;
   &lt;img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/Author/liubing.png" width="125"&gt;
  &lt;/div&gt; 
  &lt;h3 class="lb-h4"&gt;刘冰&lt;/h3&gt; 
  &lt;p&gt;Zenlayer，产品经理&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/footer&gt;</content:encoded>
										</item>
		<item>
		<title>使用Python语言实现Transcribe Streaming的websocket协议</title>
		<link>https://aws.amazon.com/cn/blogs/china/use-python-language-to-implement-the-websocket-protocol-of-transcribe-streaming/</link>
				<pubDate>Fri, 03 Sep 2021 03:45:21 +0000</pubDate>
		<dc:creator><![CDATA[AWS Team]]></dc:creator>
				<category><![CDATA[Artificial Intelligence]]></category>
		<category><![CDATA[Amazon Transcribe]]></category>

		<guid isPermaLink="false">e21e52547928d10b376260b6094480799af5ab25</guid>
				<description>Amazon Transcribe是自动语音识别（ASR）服务，可让开发人员轻松地为其应用程序添加语音转文本功能，Transcribe支持文件和流式Streaming的两种音频输入方式，Transcribe Streaming可以应用在会议记录，语音控制交互，语言实时翻译等场景，Streaming方式支持HTTP/2和WebSocket两种协议。本文介绍使用Python语言实现Transcribe Streaming的WebSocket协议。</description>
								<content:encoded>&lt;h2&gt;概述&lt;/h2&gt; 
&lt;p&gt;Amazon Transcribe是自动语音识别（ASR）服务，可让开发人员轻松地为其应用程序添加语音转文本功能，Transcribe支持文件和流式Streaming的两种音频输入方式，Transcribe Streaming可以应用在会议记录，语音控制交互，语言实时翻译等场景，Streaming方式支持HTTP/2和WebSocket两种协议。本文介绍使用Python语言实现Transcribe Streaming的WebSocket协议。&lt;/p&gt; 
&lt;h2&gt;Streaming transcription 接口介绍&lt;/h2&gt; 
&lt;p&gt;Streaming transcription 接口可以接收音频流并且实时转换为文字，然后将结果返回客户端，同时返回数据中包含partial值，用来标示句子是否结束。&lt;/p&gt; 
&lt;p&gt;Streaming的数据是被编码的，由prelude和data组成。编码格式详见：https://docs.aws.amazon.com/transcribe/latest/dg/event-stream.html&lt;/p&gt; 
&lt;h2&gt;Python语言的实现过程和示例&lt;/h2&gt; 
&lt;p&gt;Python示例程序的运行环境是Python 3.7.9版本。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;添加IAM Policy到你使用到的IAM user&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "transcribestreaming",
            "Effect": "Allow",
            "Action": "transcribe:StartStreamTranscriptionWebSocket",
            "Resource": "*"
        }
    ]
}&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;安装Python的程序包&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Python示例程序需要安装三个程序包websocket-client，boto3和amazon_transcribe；其中boto3是AWS SDK for Python，amazon_transcribe是Amazon Transcribe Streaming SDK，这两个SDK简化了和Amazon Transcribe Service的集成过程。amazon_transcribe的详细说明见：https://github.com/awslabs/amazon-transcribe-streaming-sdk&lt;/p&gt; 
&lt;p&gt;安装程序包的命令：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;pip3 install boto3
pip3 install amazon_transcribe
pip3 install websocket-client&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;Python程序的import部分：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;import hashlib
import hmac
import urllib.parse
from datetime import datetime
import time
import ssl
import json
import websocket
import _thread
from amazon_transcribe.eventstream import EventStreamMessageSerializer
from amazon_transcribe.eventstream import EventStreamBuffer
from boto3.session import Session&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;创建签名URL的函数&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;URL签名说明详见：&lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/websocket.html#websocket-url"&gt;https://docs.aws.amazon.com/transcribe/latest/dg/websocket.html#websocket-url&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Python的实现示例：&lt;/p&gt; 
&lt;p&gt;下列代码中主体函数是create_pre_signed_url，它将生成访问Streaming transcription 接口的URL，其中包括必要的参数和签名，它需要传入4个参数:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;参数region代表将要调用的Amazon Web Service Region。可查看Streaming支持的region，详见Docs链接的Amazon Transcribe Streaming部分（&lt;a href="https://docs.aws.amazon.com/general/latest/gr/transcribe.html"&gt;https://docs.aws.amazon.com/general/latest/gr/transcribe.html&lt;/a&gt;）&lt;/li&gt; 
 &lt;li&gt;参数language_code, media_encoding, sample_rate是stream-transcription-websocket接口的参数，定义见https://docs.aws.amazon.com/transcribe/latest/dg/websocket.html#websocket-url&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;def sign(key, msg):
    return hmac.new(key, msg.encode("utf-8"), hashlib.sha256).digest()

def getSignatureKey(key, dateStamp, region, serviceName):
    kDate = sign(("AWS4" + key).encode("utf-8"), dateStamp)
    kRegion = sign(kDate, region)
    kService = sign(kRegion, serviceName)
    kSigning = sign(kService, "aws4_request")
    return kSigning

def create_pre_signed_url(region, language_code, media_encoding, sample_rate):
    # 获得access key和secret key
    credentials = Session().get_credentials()
    access_key_id = credentials.access_key
    secret_access_key = credentials.secret_key

    method = "GET"
    service = "transcribe"
    endpoint = "wss://transcribestreaming." + region + ".amazonaws.com:8443"
    host = "transcribestreaming." + region + ".amazonaws.com:8443"
    algorithm = "AWS4-HMAC-SHA256"

    t = datetime.utcnow()
    amz_date =t.strftime('%Y%m%dT%H%M%SZ')
    datestamp =t.strftime('%Y%m%d')

    canonical_uri = "/stream-transcription-websocket"

    canonical_headers = "host:" + host + "\n"
    signed_headers = "host"

    credential_scope = datestamp + "/" + region + "/" + service + "/" + "aws4_request"

    canonical_querystring = "X-Amz-Algorithm=" + algorithm
    canonical_querystring += "&amp;amp;X-Amz-Credential=" + urllib.parse.quote_plus(access_key_id + "/" + credential_scope)
    canonical_querystring += "&amp;amp;X-Amz-Date=" + amz_date
    canonical_querystring += "&amp;amp;X-Amz-Expires=300"
    canonical_querystring += "&amp;amp;X-Amz-SignedHeaders=" + signed_headers
    canonical_querystring += "&amp;amp;language-code="+ language_code +"&amp;amp;media-encoding=" + media_encoding +"&amp;amp;sample-rate=" + sample_rate

    # Zero length string for connecting
    payload_hash = hashlib.sha256(("").encode('utf-8')).hexdigest()

    canonical_request = method + '\n' \
                        + canonical_uri + '\n' \
                        + canonical_querystring + '\n' \
                        + canonical_headers + '\n' \
                        + signed_headers + '\n' \
                        + payload_hash

    string_to_sign = algorithm + "\n" \
                     + amz_date + "\n" \
                     + credential_scope + "\n" \
                     + hashlib.sha256(canonical_request.encode("utf-8")).hexdigest()

    signing_key = getSignatureKey(secret_access_key, datestamp, region, service)

    signature = hmac.new(signing_key, string_to_sign.encode("utf-8"),
                         hashlib.sha256).hexdigest()

    canonical_querystring += "&amp;amp;X-Amz-Signature=" + signature

    request_url = endpoint + canonical_uri + "?" + canonical_querystring

    return request_url
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;编写main函数&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;下面代码中的loop_receiving和send_data函数，作用分别是从Amazon Transcribe Service接收消息，和向Amazon Transcribe Service发送消息。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;def main():
    url = create_pre_signed_url("us-east-1", "en-US", "pcm", "16000")
    ws = websocket.create_connection(url, sslopt={"cert_reqs": ssl.CERT_NONE})

    _thread.start_new_thread(loop_receiving, (ws,))
    print("Receiving...")
    send_data(ws)

    while True:
        time.sleep(1)
main()
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;编写loop_receiving函数&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;该函数位于main函数上方。它将接收Amazon Transcribe Streaming Service的返回数据，并且打印出来。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;def loop_receiving(ws):
    try:
        while True:
            result = ws.recv()

            if result == '':
                continue

            eventStreamBuffer = EventStreamBuffer()

            eventStreamBuffer.add_data(result)
            eventStreamMessage = eventStreamBuffer.next()

            stream_payload = eventStreamMessage.payload

            transcript = json.loads(bytes.decode(stream_payload, "UTF-8"))

            print("response:",transcript)

            results = transcript['Transcript']['Results']
            if len(results)&amp;gt;0:
                for length in range(len(results)):
                    if 'IsPartial' in results[length]:
                        print('IsPartial:', results[length]['IsPartial'])

                    if 'Alternatives' in results[length]:
                        alternatives = results[length]['Alternatives']
                        if len(alternatives)&amp;gt;0:
                            for sublength in range(len(alternatives)):
                                if 'Transcript' in alternatives[sublength]:
                                    print('Transcript:', alternatives[sublength]['Transcript'])


    except Exception as e:
        if 'WebSocketConnectionClosedException' == e.__class__.__name__:
            print("Error: websocket connection is closed")
        else:
            print(f"Exception Name: {e.__class__.__name__}")
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;编写send_data函数&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;该函数位于main函数上方。它将发送音频数据到Amazon Transcribe Streaming Service。其中testFile变量是测试音频文件地址，测试音频为pem格式，英语，采样率为16000。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;def send_data(ws):

    testFile = "xxx.pem"

    bufferSize = 1024*16

    stream_headers = {
        ":message-type": "event",
        ":event-type": "AudioEvent",
        ":content-type": "application/octet-stream",
    }

    eventstream_serializer = EventStreamMessageSerializer()

    with open(testFile, "rb") as source:
        while True:
            audio_chunk = source.read(bufferSize)
            # 将音频数据进行编码
            event_bytes = eventstream_serializer.serialize(stream_headers, audio_chunk)

            ws.send(event_bytes, opcode = 0x2) # 0 x 2 send binary

            # end with b'' data bytes
            if len(audio_chunk) == 0:
                break&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h2&gt;&lt;/h2&gt; 
&lt;h2&gt;结论&lt;/h2&gt; 
&lt;p&gt;在这篇文章中，介绍了如何使用Python语言实现Transcribe Streaming的WebSocket协议，提供了Python的例子供参考，包括签名URL、数据编码、数据流的发送和接收等部分。完整代码见：https://github.com/xuemark/transcribe/blob/master/transcribe_streaming_websocket.py&lt;/p&gt; 
&lt;h2&gt;参考资料&lt;/h2&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/what-is-transcribe.html"&gt;https://docs.aws.amazon.com/transcribe/latest/dg/what-is-transcribe.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html"&gt;https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/transcribe/latest/dg/websocket.html"&gt;https://docs.aws.amazon.com/transcribe/latest/dg/websocket.html&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://aws.amazon.com/transcribe"&gt;https://aws.amazon.com/transcribe&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/awslabs/amazon-transcribe-streaming-sdk"&gt;https://github.com/awslabs/amazon-transcribe-streaming-sdk&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;本篇作者&lt;/h2&gt; 
&lt;footer&gt; 
 &lt;div class="blog-author-box"&gt; 
  &lt;div class="blog-author-image"&gt;
   &lt;img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/Author/markxue.jpg" width="125"&gt;
  &lt;/div&gt; 
  &lt;h3 class="lb-h4"&gt;薛召兵&lt;/h3&gt; 
  &lt;p&gt;AWS解决方案架构师，负责帮助客户进行上云架构的设计和咨询。同时致力于AWS容器服务、媒体服务和机器学习服务在国内和全球商业客户的应用和推广，推进企业服务迁移上云进程。有10年以上的软件开发、售前技术支持、系统架构设计等经验。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/footer&gt;</content:encoded>
										</item>
		<item>
		<title>基于 Nitro Enclave 构建安全的可信执行环境</title>
		<link>https://aws.amazon.com/cn/blogs/china/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave/</link>
				<pubDate>Thu, 02 Sep 2021 03:44:40 +0000</pubDate>
		<dc:creator><![CDATA[AWS Team]]></dc:creator>
				<category><![CDATA[Security, Identity, & Compliance]]></category>
		<category><![CDATA[Amazon EC2]]></category>
		<category><![CDATA[AWS Certificate Manager]]></category>
		<category><![CDATA[AWS KMS]]></category>

		<guid isPermaLink="false">fd8724fce745fd981e91ec04870e32556afb194e</guid>
				<description>Nitro Enclave 使用户可以在亚马逊云科技上，简便，安全地运行隔离的可信计算环境，用于处理私钥，PII等敏感数据，支持 Intel，AMD 芯片的计算实例，没有任何额外费用，具备更好的灵活性和成本效益，且与云原生的安全服务 KMS，ACM 直接集成，为用户提供更好的使用体验和安全性保障。</description>
								<content:encoded>&lt;h2&gt;前言&lt;/h2&gt; 
&lt;p&gt;随着移动通信和互联网技术的发展与应用，数据泄漏可能会造成直接的收入损失，并对业务、用户信任和企业声誉产生重大影响，如何在业务更加深入地数字化的同时，在计算环境中确保数据的机密性和完整性，将是企业面临的重大挑战，尤其是在公有云的环境中。&lt;/p&gt; 
&lt;p&gt;可信执行环境（TEE: Trusted Execution Environment）的提出，正是应对这样的需求。 可信执行环境在芯片层面单独划分出来的一个隔离空间，建立与本地操作系统（例如 Android 和 Microsoft Windows）并行运行的隔离执行环境，保证加载到内部的代码和数据在机密性和完整性方面受到保护，保护敏感代码和数据免受来自本地操作系统潜在漏洞的特权攻击。&lt;/p&gt; 
&lt;p&gt;可信执行环境典型的业务场景包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;strong&gt;私钥安全&lt;/strong&gt;： 用户可以在隔离的安全环境中使用和处理私钥，例如加密和签名，同时阻止父实例上的用户、应用程序查看和获取这些密钥。&lt;/li&gt; 
 &lt;li&gt;&lt;strong&gt;敏感数据处理&lt;/strong&gt;： 可以在隔离的安全区域内运行应用程序，将个人身份，信用卡号等 PII 敏感数据进行令牌化。同时加密的数据可以发送到安全区域进行解密并处理。在整个过程中，父 EC2 实例将无法查看或访问敏感数据。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;业界常见的可信执行环境的技术包括，Intel SGX 和 ARM TrustZone 等，这个隔离的空间，在 Intel SGX 中被称作 Enclave，而在 ARM TrustZone 中则被称为 Secure World。&lt;/p&gt; 
&lt;p&gt;亚马逊云科技作为公有云的技术领导者，也推出了 TEE 解决方案，&lt;a href="https://aws.amazon.com/cn/ec2/nitro/nitro-enclaves/"&gt;Nitro Enclave&lt;/a&gt;，使用 Nitro Hypervisor 技术，在 EC2 实例内部，提供 CPU 和内存隔离的一个计算环境。&lt;/p&gt; 
&lt;p&gt;Nitro Enclave 主要优势：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;隔离和安全的运行环境: 基于 Nitro Hypervisor 实现的完全隔离的 CPU，内存计算环境，无持久化存储，交互式访问和外部网络&lt;/li&gt; 
 &lt;li&gt;加密证明: Attestation 证明文件允许用户在外部服务中，授权 Enclave 访问权限，和验证 Enclave 中的代码完整性&lt;/li&gt; 
 &lt;li&gt;灵活: 不需要绑定 CPU 厂商，支持 Intel，AMD 芯片，和任何编程语言&lt;/li&gt; 
 &lt;li&gt;成本: Nitro Enclave 运行于 EC2 中，无任何额外费用&lt;/li&gt; 
 &lt;li&gt;云原生安全集成: 与云原生的 KMS，ACM 安全服务直接集成，提供更好的用户体验和安全保障&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;1. Nitro Enclave 介绍&lt;/h2&gt; 
&lt;h3&gt;1.1 Nitro Enclave 基础介绍&lt;/h3&gt; 
&lt;p&gt;Nitro Enclaves 是一项 Amazon EC2 功能，允许您从 Amazon EC2 实例创建隔离的执行环境，称为 enclave。 Enclave 是独立的、强化的且高度受限的虚拟机，基于 Nitro Hypervisor 虚拟化技术，确保父实例无法访问隔离的 vCPU 和 enclave 的内存。Enclave 没有持久存储、交互式访问或外部网络，仅支持与其父实例的安全 Socket 连接。 用户无法通过 SSH 进入 enclave，并且父实例的进程、应用程序或用户（root 或 admin）无法访问 enclave 内的数据和应用程序。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave1.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave1.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;1.2 Attestation 证明文件&lt;/h3&gt; 
&lt;p&gt;在 Nitro Enclave 中运行程序，除了隔离环境带来的私密性之外，还提供额外的安全特性，加密证明(Cryptographic Attestation)。Attestation 是 Enclave 用来证明其身份并与外部服务建立信任的过程，以及保证数据通信的安全。&lt;/p&gt; 
&lt;p&gt;Attestation 的目的是根据在特定 enclave 中运行的代码和配置，证明 enclave 是值得信赖的实体。 Nitro Hypervisor 能够生成包含 enclave 详细信息的证明文档，包括 enclave 签名密钥、enclave 映像的哈希值、父实例 ID 的哈希值以及附加 IAM 角色的 ARN 的哈希值。&lt;/p&gt; 
&lt;p&gt;Enclave Attestation 功能是由 Nitro Hypervisor 中的 Nitro Secure Module (NSM) 组件实现。亚马逊云科技提供了&lt;a href="https://github.com/aws/aws-nitro-enclaves-nsm-api"&gt;一套 helper library&lt;/a&gt;，方便用户在开发 Enclave 程序时，与 NSM 交互， 查询 PCR 和请求 Attestation 证明文件。&lt;/p&gt; 
&lt;p&gt;关于 Nitro Enclave Attestation 生成的详细过程，可参考&lt;a href="https://github.com/aws/aws-nitro-enclaves-nsm-api/blob/main/docs/attestation_process.md"&gt;此文档&lt;/a&gt;。下面是一个 Attestation 证明文件的结构：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;AttestationDocument = {
    module_id: text,               ; issuing Nitro hypervisor module ID
    timestamp: uint .size 8,       ; UTC time when document was created, in
                                   ; milliseconds since UNIX epoch
    digest: digest,                ; the digest function used for calculating the
                                   ; register values
    pcrs: { + index =&amp;gt; pcr },      ; map of all locked PCRs at the moment the
                                   ; attestation document was generated
    certificate: cert,             ; the infrastucture certificate used to sign this
                                   ; document, DER encoded
    cabundle: [* cert],            ; issuing CA bundle for infrastructure certificate
    ? public_key: user_data,       ; an optional DER-encoded key the attestation
                                   ; consumer can use to encrypt data with
    ? user_data: user_data,        ; additional signed user data, defined by protocol
    ? nonce: user_data,            ; an optional cryptographic nonce provided by the
                                   ; aattestation consumer as a proof of authenticity
}

cert = bytes .size (1..1024)       ; DER encoded certificate
user_data = bytes .size (0..1024)
pcr = bytes .size (32/48/64)       ; PCR content
index = 0..31
digest = "SHA384"
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;在 Attestation 证明文件中，包含了一个 Public Key，当 Enclave 程序向外部服务发起请求时，带上证明文件，外部应用可以利用该 Public Key，对需要返回 Enclave 的 Response 进行加密， Enclave 收到该 Response 后使用 Private Key 进行解密，确保数据在传输过程中不会被嗅探，且只有发起服务请求的 Enclave 才能解密该 Response。&lt;/p&gt; 
&lt;p&gt;另外，Attestation 文件中还包括每个 Enclave 一系列属性的哈希值，被称为 PCR (Platform Configuration Registers) 。用户可以使用 PCR 的哈希值在外部服务中创建访问策略，以授予对服务请求的访问权限。 Enclave 有 6 个 PCR，分别对应 Enclave 不同的元数据，其中 PCR 0，1，2 与 Enclave 镜像文件相关，在 Enclave 创建时生成。&lt;/p&gt; 
&lt;table border="1"&gt; 
 &lt;thead&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;strong&gt;PCR&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Hash of&lt;/strong&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/thead&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PCR0&lt;/td&gt; 
   &lt;td&gt;Enclave image file&lt;/td&gt; 
   &lt;td&gt;A contiguous measure of the contents of the image file, without the section data.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PCR1&lt;/td&gt; 
   &lt;td&gt;Linux kernel and bootstrap&lt;/td&gt; 
   &lt;td&gt;A contiguous measurement of the kernel and boot ramfs data.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PCR2&lt;/td&gt; 
   &lt;td&gt;Application&lt;/td&gt; 
   &lt;td&gt;A contiguous, in-order measurement of the user applications, without the boot ramfs.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PCR3&lt;/td&gt; 
   &lt;td&gt;IAM role assigned to the parent instance&lt;/td&gt; 
   &lt;td&gt;Ensures that the attestation process succeeds only when the parent instance has the correct IAM role.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PCR4&lt;/td&gt; 
   &lt;td&gt;Instance ID of the parent instance&lt;/td&gt; 
   &lt;td&gt;Ensures that the attestation process succeeds only when the parent instance has a specific instance ID.&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;PCR8&lt;/td&gt; 
   &lt;td&gt;Enclave image file signing certificate&lt;/td&gt; 
   &lt;td&gt;Ensures that the attestation process succeeds only when the enclave was booted from an enclave image file signed by a specific certificate.&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Attestation 证明文件生成后，还将会由受信任Nitro Hypervisor Attestation Public Key Infrastructure (PKI) ，基于一个 ACM PCA 的根证书进行签署，有效期为 30 年。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;CN=aws.nitro-enclaves, C=US, O=Amazon, OU=AWS&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;用户可以下载该&lt;a href="https://aws-nitro-enclaves.amazonaws.com/AWS_NitroEnclaves_Root-G1.zip"&gt;根证书&lt;/a&gt;，导入到您的任何外部服务中，当 Enclave 中运行的程序需要请求外部服务时，可向 Nitro Hypervisor 申请并签署证明文件，外部服务通过导入的根证书，来验证 Enclave 证明文件的有效性，确保服务请求是来自于特定的 Enclave，从而建立信任。&lt;/p&gt; 
&lt;p&gt;目前 Amazon Key Management Service (KMS) 和 Amazon Certificate Manager (ACM) 支持与 Nitro Enclave 以及 Attestation 原生集成，Enclave 可借助 vsock 以及父实例上的代理，向 KMS 或 ACM 发起 API 请求，进行加密，解密，和证书申请，更新等操作，同时 KMS 和 ACM 支持对 Enclave 签名的证明文件进行验证，并可将 API Response 用证明文件中的 Public Key 进行加密，确保数据隐私安全。&lt;/p&gt; 
&lt;p&gt;适用于 Nitro Enclaves 的 ACM 允许您将公有和私有 SSL/TLS 证书与在带有 Nitro Enclaves 的 EC2 实例上运行的 Web 应用一起使用。 亚马逊云科技提供了一个打包好的 ACM for Nitro Enclaves 程序，作为服务(aws-nitro-enclaves-acm) 运行在父实例 Linux 操作系统中，该服务将自动创建和运行 Enclave，与 ACM 交互创建安全私钥，将证书及其私钥分发到 enclave，并管理证书续订，证书的私钥在 enclave 中保持隔离，防止父实例及其用户访问它。 具体部署过程可参照&lt;a href="https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave-refapp.html"&gt;官方文档&lt;/a&gt;。&lt;/p&gt; 
&lt;p&gt;目前，ACM for Nitro Enclaves 支持与运行在 Amazon EC2 实例上的 NGINX 配合使用，以安装证书并无缝替换过期证书，以提供 HTTPS 服务，未来将添加对其他 Web 服务（Apache HTTP）的支持。&lt;/p&gt; 
&lt;h3&gt;1.3 Nitro Enclave Attestation 与 KMS 集成&lt;/h3&gt; 
&lt;p&gt;Amazon KMS 是一项云原生的密钥管理服务，用来创建和管理密钥，支持使用密钥进行 Server-side 的加密，解密，签名，验证等操作，还支持生成用于 client-side 加密的密钥。 KMS 内置原生支持 Nitro Enclaves，能够验证来自 Enclave 请求中携带的 Attestation 证明文件，并可以根据证明文件中的 PCR 值，定义密钥策略，来授予对特定 Enclave 的访问权限。&lt;/p&gt; 
&lt;p&gt;可以在 KMS Policy 中定义的 Condition Key ，对来自 Enclave 发起的以下三个 API 请求，进行 Attestation 验证和 API 请求授权，例如只允许来自指定 Enclave 的 KMS Decrypt API 请求。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;kms:GenerateRandom： 生成随机字符串&lt;/li&gt; 
 &lt;li&gt;kms:GenerateDataKey： 生成 Data Key，用于 Client-Side 加密&lt;/li&gt; 
 &lt;li&gt;kms:Decrypt： 对文本或 Data Key 进行解密&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;{
  "Version": "2012-10-17",
  "Statement": [{
    "Sid" : "Enable enclave data processing",
    "Effect" : "Allow",
    "Principal" : {
      "AWS" : "arn:aws:iam::123456789012:role/data-processing"
    },
    "Action": [
      "kms:Decrypt",
      "kms:GenerateDataKey",
      "kms:GenerateRandom"
    ],
    "Resource": "*",
    "Condition": {
      "StringEqualsIgnoreCase": {
        "kms:RecipientAttestation:ImageSha384":"EXAMPLE8abcdef7abcdef6abcdef5abcdef4abcdef3abcdef2abcdef1abcdef1abcdef0abcdef1abcdEXAMPLE",
        "kms:RecipientAttestation:PCR0":"EXAMPLEbc2ecbb68ed99a13d7122abfc0666b926a79d5379bc58b9445c84217f59cfdd36c08b2c79552928702EXAMPLE",
        "kms:RecipientAttestation:PCR1":"EXAMPLE050abf6b993c915505f3220e2d82b51aff830ad14cbecc2eec1bf0b4ae749d311c663f464cde9f718aEXAMPLE", 
        "kms:RecipientAttestation:PCR2":"EXAMPLEc300289e872e6ac4d19b0b5ac4a9b020c98295643ff3978610750ce6a86f7edff24e3c0a4a445f2ff8EXAMPLE"
      }
    }
  }]
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;注意： 目前使用 KMS SDK 和 CLI 请求 KMS 时，还不支持添加 attestation 证明文件，所以在 Enclave 中向 KMS 发起以上三个 API 请求时，只能用过 HTTP POST 的方式构建 API 请求，将 attestation 加入到 request parameter 中。同时，KMS将自动使用证明文件中的 Public Key 对 API Response 中的明文进行加密，Enclave 收到 Response 后，需要使用 Private Key 进行解密&lt;/p&gt; 
&lt;p&gt;例如: 在 KMS Decrypt API Request 中，新增的Recipient字段将包括AttestationDocument证明文件，同时在 API Response 中，原本的Plaintext字段将替换为加密的CiphertextForRecipient字段，明文字段默认被 KMS 使用证明文件中的 Public Key 进行加密。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;# KMS Decrypt Request (New Recipient parameter)
{
   "CiphertextBlob": blob,
   "EncryptionAlgorithm": "string",
   "EncryptionContext": { 
      "string" : "string" 
   },
   "GrantTokens": [ "string" ],
   "Recipient": { 
      "AttestationDocument": blob,
      "KeyEncryptionAlgorithm": "string"
   }
}

# KMS Decrypt Response (CiphertextForRecipient returned instead of Plaintext)
{
   "CiphertextForRecipient": blob,
   "EncryptionAlgorithm": "string",
   "KeyId": "string",
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;通过 Nitro Enclave 与 KMS Attestation 的集成，可以确保敏感数据只能在 Enclave 中进行处理，不会被泄漏，嗅探和篡改。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;明文数据只在 Enclave 中可见，隔离的运行环境可确保数据不会嗅探&lt;/li&gt; 
 &lt;li&gt;在 Enclave 外部只能以加密后的形态对数据进行传输和存储，确保原始数据不会被泄漏&lt;/li&gt; 
 &lt;li&gt;同时借助 Enclave 的 Attestation，确保 Enclave 中的代码不会被篡改&lt;/li&gt; 
 &lt;li&gt;通过 KMS 密钥策略，确保数据只能在特定的 Enclave 内部才能被解密&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h3&gt;1.4 管理和开发 Nitro Enclave 应用&lt;/h3&gt; 
&lt;p&gt;如果需要开发一个运行于 Enclave 中的应用，需要先将 Enclave 运行所需的代码，依赖包等打包成 Docker 镜像格式， 然后将 Docker 镜像转换成 Enclave 镜像 (.eif)，以启动 Enclave。&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave2.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave2.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Nitro Enclave 提供一个命令行工具 Nitro-CLI，用来创建，部署和管理Enclave:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/enclaves/latest/user/cmd-nitro-build-enclave.html"&gt;nitro-cli build-enclave&lt;/a&gt;: 将 Docker 镜像转换成 Enclave 镜像 (.eif文件)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli build-enclave --docker-uri repository:tag --docker-dir /path_to/dockerfile_directory --output-file enclave_image_filename --private-key key.pem --signing-certificate certificate.pem&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/enclaves/latest/user/cmd-nitro-run-enclave.html"&gt;nitro-cli run-enclave&lt;/a&gt;: 从 Enclave 镜像文件在 EC2 上启动一个 Enclave&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;strong&gt;:&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;每台&lt;/strong&gt;&lt;strong&gt; EC2 &lt;/strong&gt;&lt;strong&gt;上只支持运行一个&lt;/strong&gt;&lt;strong&gt; enclave &lt;/strong&gt;&lt;strong&gt;环境，且&lt;/strong&gt;&lt;strong&gt; EC2 &lt;/strong&gt;&lt;strong&gt;实例至少具备&lt;/strong&gt;&lt;strong&gt; 4 &lt;/strong&gt;&lt;strong&gt;个&lt;/strong&gt;&lt;strong&gt; CPU&lt;/strong&gt;&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli run-enclave --cpu-count number_of_vcpus --cpu-ids list_of_vcpu_ids --memory amount_of_memory_in_MiB --eif-path path_to_enclave_image_file [--enclave-cid cid_number] [--debug-mode]&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/enclaves/latest/user/cmd-nitro-describe-enclaves.html"&gt;nitro-cli describe-enclaves&lt;/a&gt;: 查看当前运行的 Enclave&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli describe-enclaves&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/enclaves/latest/user/cmd-nitro-console.html"&gt;nitro-cli console&lt;/a&gt;: 以只读模式连接到一个运行的 Enclave，获取 Console 输出.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;strong&gt;:&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;只有以&lt;/strong&gt;&lt;strong&gt;–debug-mode&lt;/strong&gt;&lt;strong&gt;模式运行的&lt;/strong&gt;&lt;strong&gt; enclave&lt;/strong&gt;&lt;strong&gt;，才允许&lt;/strong&gt;&lt;strong&gt; console &lt;/strong&gt;&lt;strong&gt;连接&lt;/strong&gt;&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli console --enclave-id enclave_id&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="https://docs.aws.amazon.com/enclaves/latest/user/cmd-nitro-terminate-enclave.html"&gt;nitro-cli terminate-enclave&lt;/a&gt;: 关闭指定的 enclave&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli terminate-enclave --enclave-id enclave_id&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;另外，亚马逊云科技提供一系列工具，方便用户开发 Enclave 应用：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://aws.amazon.com/marketplace/pp/B08R69DKQ1"&gt;Nitro Enclaves Developer AMI&lt;/a&gt;: 包含开发 Enclave 应用程序和构建 Enclave 镜像文件所需的工具和组件，以及示例应用&lt;/li&gt; 
 &lt;li&gt;&lt;a href="https://github.com/aws/aws-nitro-enclaves-sdk-c"&gt;Nitro Enclaves SDK&lt;/a&gt;: 一组可用于开发 enclave 应用程序的 c 语言开源库，与KMS 集成，并为 attestation 证明和加密操作提供内置支持。&lt;/li&gt; 
&lt;/ul&gt; 
&lt;h2&gt;2. 搭建一个 Nitro Enclave 示例环境，结合 KMS 实现私钥安全&lt;/h2&gt; 
&lt;p&gt;下面将以一个私钥管理应用场景的示例，使用 Python 代码演示如何在 Nitro Enclave 中处理私钥数据，并结合 KMS 和 Attestation，保证私钥在加密，解密，存储和签名过程中的安全。该示例将包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;创建和部署两个 Enclave，一个实现私钥的生成和加密，另一个实现私钥的解密和签名&lt;/li&gt; 
 &lt;li&gt;Enclave 通过 vsock 与父实例通信&lt;/li&gt; 
 &lt;li&gt;Enclave 通过父实例上运行 KMS Proxy，访问 KMS 服务&lt;/li&gt; 
 &lt;li&gt;Enclave 向 Nitro Hypervisor 请求 Attestation 证明文件&lt;/li&gt; 
 &lt;li&gt;在 Enclave 中向 KMS 发送 API 请求时，带上证明文件&lt;/li&gt; 
 &lt;li&gt;KMS 服务配置密钥策略，将密钥的访问权限仅授予特定的 Enclave&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;私钥管理应用场景示例架构图和工作流如下：&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave3.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave3.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;首先创建一个 KMS Key，启动支持 Enclave 的两台 EC2 实例，分别创建和运行 Enclave，vsock 和 KMS Proxy。&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;在 Enclave-1 中通过 kms:GenerateRandom API 生成一个 256 位的私钥，利用私钥生成对应的公钥(ecdsa-p256k1)&lt;/li&gt; 
 &lt;li&gt;在 Enclave-1 中通过 kms:GenerateDataKey API 获取加密密钥（包括一个明文 DataKey 和一个KMS加密的 DataKey），使用明文 DataKey 对私钥进行 Client-Side 加密&lt;/li&gt; 
 &lt;li&gt;在 Enclave-1 中，将加密的私钥，加密的 DataKey 和公钥，通过 vsock 发送到父实例&lt;/li&gt; 
 &lt;li&gt;在 EC2-1 父实例中，将从 vsock 中收到的数据（加密的私钥，加密的 DataKey 和公钥）写入到 DynamoDB 数据库&lt;/li&gt; 
 &lt;li&gt;在 EC2-2 父实例中，从 DynamoDB 中读取一条数据（私钥ID，加密的私钥，加密的 DataKey 和公钥），通过 vsock 将加密的私钥，加密的 DataKey 和需要被签名的消息，发送给 Enclave-2&lt;/li&gt; 
 &lt;li&gt;在 Enclave-2 中，从vsock接收数据（加密的私钥，加密的 DataKey 和需要被签名的消息），通过 kms:Decrypt API 对加密的 DataKey 进行解密，获取明文 DataKey&lt;/li&gt; 
 &lt;li&gt;在 Enclave-2 中，使用明文 DataKey 对加密的私钥进行解密，并使用私钥，对消息进行签名&lt;/li&gt; 
 &lt;li&gt;在 Enclave-2 中，将签名后的消息通过通过 vsock 发送到父实例&lt;/li&gt; 
 &lt;li&gt;在 EC2-2 父实例中，对送 vsock 接收到的签名消息，使用公钥进行验证&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h3&gt;2.1 基础环境部署&lt;/h3&gt; 
&lt;h4&gt;2.1.1 启动两台 EC2 实例，安装依赖包&lt;/h4&gt; 
&lt;p&gt;首先创建 EC2 及 Enclave 程序所需的 IAM Role，至少需要具备 DynamoDB 的访问权限。为了简化配置，在 demo 中直接使用了 KMS 和 DynamoDB 托管的 FullAccess 策略。但在生产环境中，不能直接使用托管策略，需要自定义用户策略，进行访问行为和资源级别的精细化授权。&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave4.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave4.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 启动两台 Amazon Linux2 的 m5.xlarge EC2 实例(至少 4 vCPU 的 Nitro 实例类型), 需要手动启用 Enclave (创建 EC2 时默认不启用 enclave )&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave5.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave5.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 创建 EC2 实例时，在User Data 中，粘贴以下信息，完成安装 Nitro-CLI ，Docker，以及其他 Enclave 程序所需的依赖包，修改 Enclave 可占用的最大内存，下载 Enclave 示例代码等。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;#!/bin/bash
amazon-linux-extras install aws-nitro-enclaves-cli -y
yum install aws-nitro-enclaves-cli-devel -y
usermod -aG ne ec2-user
systemctl start nitro-enclaves-allocator.service &amp;amp;&amp;amp; systemctl enable nitro-enclaves-allocator.service
amazon-linux-extras install docker -y
usermod -aG docker ec2-user
systemctl start docker &amp;amp;&amp;amp; systemctl enable docker
yum install git -y
pip3 install ecdsa
pip3 install requests
pip3 install boto3
sed -i "s/memory_mib: 512/memory_mib: 3072/g" /etc/nitro_enclaves/allocator.yaml
su ec2-user -c 'cd /home/ec2-user &amp;amp;&amp;amp; git clone https://github.com/hxhwing/Nitro-Enclave-Demo.git'
shutdown -r now
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;EC2 启动完成后，修改实例名称用于标记：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;第一台 EC2: NitroEnclaveDemo-1，用于生成，加密私钥，存储到 DynamoDB&lt;/li&gt; 
 &lt;li&gt;第二台 EC2: NitroEnclaveDemo-2，用于解密私钥，签名和验证消息&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave6.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave6.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;2.1.2 创建 KMS Key&lt;/h4&gt; 
&lt;p&gt;在 Amazon KMS 服务中创建一个对称密钥，用于在 Enclave 中调用 KMS API，进行私钥的生成和加解密。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;第一步： 选择对称密钥&lt;/li&gt; 
 &lt;li&gt;第二步： 为 Key 添加别名NitroEnclaveDemo&lt;/li&gt; 
 &lt;li&gt;第三步： 选择 Key 的管理员用户（只有 Key 管理员可以删除或修改 Key 的权限）&lt;/li&gt; 
 &lt;li&gt;第四步： 密钥使用权限，不选择任何用户或角色&lt;/li&gt; 
 &lt;li&gt;第五步： 修改自动生成的 Key Policy，在 Statements 中添加以下策略，为前面步骤创建的 EC2 Role 分配 “kms:Decrypt”,”kms:GenerateDataKey”,”kms:GenerateRandom” 权限，暂不配置策略条件&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;       {
           "Sid": "Allow NitroEnclave-Demo Role",
           "Effect": "Allow",
           "Principal": {
               "AWS": "arn:aws:iam::xxxxxxxxxxx:role/NitroEnclave-Demo"  # Replace account ID
           },
           "Action": [
               "kms:GenerateRandom",
               "kms:GenerateDataKey",
               "kms:Decrypt"
               ],
           "Resource": "*"
       },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave7.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave7.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;2.1.3 创建 DynamoDB Table&lt;/h4&gt; 
&lt;p&gt;创建一个 DynamoDB Table，用于存放加密后的私钥，加密的 DataKey 和公钥。&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Table Name:&amp;nbsp;UserToken&lt;/li&gt; 
 &lt;li&gt;Partition key:&amp;nbsp;userid (String)&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;strong&gt;:&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;DynamoDB Table Name &lt;/strong&gt;&lt;strong&gt;和&lt;/strong&gt;&lt;strong&gt; Partition key &lt;/strong&gt;&lt;strong&gt;请与上面完全一致，如果需要修改，请同时相应修改示例程序中&lt;/strong&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;client.py&lt;/strong&gt;&lt;strong&gt;&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;的&lt;/strong&gt;&lt;strong&gt; DynamoDB &lt;/strong&gt;&lt;strong&gt;相关代码。&lt;/strong&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave8.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave8.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;2.2 创建Enclave，运行示例代码&lt;/h3&gt; 
&lt;p&gt;示例代码&amp;nbsp;Nitro-Enclave-Demo&amp;nbsp;已经被自动下载到 ec2-user 用户目录下，示例代码包含两个目录&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;GenerateToken: 运行在第一台 EC2 ，用于生成和加密私钥的 Enclave&lt;/li&gt; 
 &lt;li&gt;SignVerify: 运行在第二台 EC2，用于解密私钥，签名和验证消息的&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;[ec2-user@ip-172-31-33-19 ~]$ cd Nitro-Enclave-Demo/
[ec2-user@ip-172-31-33-19 Nitro-Enclave-Demo]$ ls -l
total 4
drwxr-xr-x 2 ec2-user ec2-user  206 Aug 28 16:12 GenerateToken
drwxr-xr-x 2 ec2-user ec2-user   87 Aug 28 16:12 pics
-rw-r--r-- 1 ec2-user ec2-user 3094 Aug 28 16:12 README.md
drwxr-xr-x 2 ec2-user ec2-user  189 Aug 28 16:12 SignVerify
drwxr-xr-x 4 ec2-user ec2-user   51 Aug 28 16:12 src
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;2.2.1 创建和运行第一个 Enclave，生成和加密私钥&lt;/h4&gt; 
&lt;p&gt;首先登录到第一台 EC2，进入 /home/ec2-user/Nitro-Enclave-Demo/GenerateToken/ 目录，主要包括以下几个文件&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;main.py: 运行在 Enclave 中的主程序文件，包括：从 KMS 生成私钥，从 KMS 获取 DataKey，加密私钥，将加密后的数据通过vsock发给父实例&lt;/li&gt; 
 &lt;li&gt;traffic-fowarder.py: 运行在 Enclave 中，用于将 Enclave 访问 KMS 的请求通过 vsock 发送到父实例&lt;/li&gt; 
 &lt;li&gt;kms.py: 用于获取 Attestation 签名，访问 KMS API，以及解密 KMS API Response&lt;/li&gt; 
 &lt;li&gt;client.py: 运行在父实例中的程序文件，包括：从 Enclave 接收加密后的数据，将数据写入到 DynamoDB&lt;/li&gt; 
 &lt;li&gt;Dockerfile: Docker 镜像文件，&lt;a href="http://main.py/"&gt;main.py&lt;/a&gt;和&amp;nbsp;&lt;a href="http://traffic-fowarer.py/"&gt;traffic-fowarer.py&lt;/a&gt;&amp;nbsp;都将被打包进容器镜像&lt;/li&gt; 
 &lt;li&gt;build.sh: 创建 Docker 镜像，将 Docker 镜像转换为 Enclave 镜像，并运行 Enclave 的自动化脚本&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt;运行build.sh，创建 Enclave 镜像，并以debug-mode 运行 Enclave。其中创建 Enclave 镜像完成后，将自动生成该 Enclave 的 PCR 0/1/2，保存到 EnclaveImage.log 的文件中.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;[ec2-user@ip-172-31-33-19 GenerateToken]$ chmod +x build.sh
[ec2-user@ip-172-31-33-19 GenerateToken]$ ./build.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;build 脚本运行完成后， Enclave 将以 debug 模式运行，用户可通过 nitro-cli 连接到运行的 Enclave 控制台，查看 Enclave 运行过程输出到Console的日志，主要用于排错&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli console --enclave-id $(nitro-cli describe-enclaves | jq -r ".[0].EnclaveID")&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p style="padding-left: 40px"&gt;2. 运行 client.py 代码，运行方式如下：&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;div class="hide-language"&gt; 
  &lt;pre&gt;&lt;code class="lang-python"&gt;python3 client.py &amp;lt;KMS Key-id&amp;gt; &amp;lt;UserID&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;p&gt;其中 “KMS Key-id” 为前面步骤中创建的别名为 NitroEnclaveDemo 的 KMS Key， “UserID” 用于标示即将生成的私钥属于哪个用户。&lt;/p&gt; 
&lt;p&gt;运行&amp;nbsp;client.py&amp;nbsp;代码后，将自动返回从 Enclave 中接收到的数据，并将数据写入到 DynamoDB Table，数据字段包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;userid: 用于标示私钥属于哪个用户&lt;/li&gt; 
 &lt;li&gt;encrypted_privatekey: 在 Enclave 中，被 KMS DataKey 加密后的私钥&lt;/li&gt; 
 &lt;li&gt;publickey: 在 Enclave 中，由私钥生成的公钥&lt;/li&gt; 
 &lt;li&gt;encrypted_datakey: KMS 加密后的 DataKey，将用于解密私钥&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;[ec2-user@ip-172-31-33-19 GenerateToken]$ python3 client.py alias/NitroEnclaveDemo u001
 {"userid": "u001", "encrypted_privatekey": "4xiMsmD1VMw1I48HMApw4LzDSWT9lz/x74dMNCz1427hz98t0JzyrFzDd68vrKl0wKB1a/LoLyhi\nvJSgQwSfCA==\n", "publickey": "0a0756e60e112d11f0d5e4a88858251f1234e27ea37261da4698d497baa6a52bbe9a3d227534866351086d7220548a4ff00fb081c9b318361cac5dae9c661f8c", "encrypted_datakey": "AQIBAHhVM1N8G00xz9DVe3FbnRAxaxNCkCaRYV6/wLYxbwj04QFUWvIkLZ6TYPE2GTUdKvMbAAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMMhfwZjlaOr8pCQneAgEQgDNMimKpywvNdcpJIgPZUYrhE5uQvzonU5o/uYhPMmZmb/kWotQNH6KSFxuTBdx6FeM0vQs="} Write User Token to DynamoDB Successfully [ec2-user@ip-172-31-33-19 GenerateToken]$&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h4&gt;2.2.2 创建和运行第二个 Enclave，解密私钥，签名和验证消息&lt;/h4&gt; 
&lt;p&gt;登录到第二台 EC2，进入 /home/ec2-user/Nitro-Enclave-Demo/SignVerify 目录：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;main.py: 运行在 Enclave 中的主程序文件，包括：从 KMS 解密 DataKey，用 DataKey 解密私钥，用私钥签名消息，将签名后的消息通过vsock发给父实例&lt;/li&gt; 
 &lt;li&gt;client.py: 运行在父实例中的程序文件，包括：从 DynamoDB 中读取数据，发送到 Enclave，然后从 Enclave 接收被私钥签名后的消息，并使用公钥验证签名消息&lt;/li&gt; 
&lt;/ul&gt; 
&lt;ol&gt; 
 &lt;li&gt;运行build.sh，创建 Enclave 镜像，并以debug-mode 运行 Enclave。其中创建 Enclave 镜像完成后，将自动生成该 Enclave 的 PCR 0/1/2，保存到 EnclaveImage.log 的文件中.&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;[ec2-user@ip-172-31-36-174 SignVerify]$ chmod +x build.sh
[ec2-user@ip-172-31-36-174 SignVerify]$ ./build.sh
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;ol start="2"&gt; 
 &lt;li&gt;运行client.py代码，运行格式如下：&lt;/li&gt; 
&lt;/ol&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;python3 client.py &amp;lt;UserID&amp;gt; &amp;lt;Message to be Signed&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;其中 “UserID” 代表从 DynamoDB 中读取哪个用户的密钥数据，“Message to be Signed” 代表将被发送到 Enclave 中被私钥签名的消息。&lt;/p&gt; 
&lt;p&gt;运行&amp;nbsp;client.py&amp;nbsp;代码后，将自动返回从 Enclave 中接收到的数据，数据字段包括：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Signed Message: Enclave 中被私钥签名后的消息&lt;/li&gt; 
 &lt;li&gt;Signed message verified by public key: True/False，表示签名的消息是否可以被公钥验证，确保私钥和公钥没有被修改&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;[ec2-user@ip-172-31-36-174 SignVerify]$ python3 client.py u001 'Hellow World'
Signed Message: 6053cfc42883d03888ba175950e463c1d8164cab8b4873b85af8531a0c6f86b8ad07012107e3322d30118ea24976f8c8f70014119159101ecc1797e7a9f72915
Signed message verified by public key: True
[ec2-user@ip-172-31-36-174 SignVerify]$
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;h3&gt;2.3 配置 KMS 密钥策略，根据 Attestation PCR 授权&lt;/h3&gt; 
&lt;p&gt;当以&amp;nbsp;debug-mode&amp;nbsp;运行 Enclave 时，Attestation 证明文件中的 PCR 为全 0，无法用来在外部服务上作为策略条件，进行权限控制。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli run-enclave ...... --debug-mode&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;运行 nitro-cli run-enclave 时，不加–debug-mode, 是以正常模式运行 Enclave，Attestation 证明文件中才会包含 Enclave 正常的 PCR。&lt;/p&gt; 
&lt;p&gt;首先在 KMS 密钥策略，添加相应的 Condition Key 限制 Attestation PCR ，其中&amp;nbsp;kms:RecipientAttestation:ImageSha384&amp;nbsp;与 PCR 0 为相同的值，每个 Enclave 的 PCR 0/1/2，可以在 Build Enclave 镜像的时候获取，本示例是写到所在代码目录下 EnclaveImage.log 文件中。&lt;/p&gt; 
&lt;p&gt;在 KMS NitroEnclaveDemo 这个 Key 的密钥策略中，添加以下两条 Deny 权限策略语句，到 KMS Key Policy 的 Statement 字段中：&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;第一段策略，授权只有来自 Enclave-1，且携带 Attestation 证明文件才能访问 kms:GenerateDataKey API，注意请替换为您自己的 PCR 0/1/2 Value&lt;/li&gt; 
 &lt;li&gt;第二段策略，授权只有来自 Enclave-2 ，且携带 Attestation 证明文件才能访问 kms:Decrypt API，注意请替换为您自己的 PCR 0/1/2 Value&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;        {
            "Sid": "Only Allow NitroEnclaveDemo-1",
            "Effect": "Deny",
            "Principal": {
                "AWS": "arn:aws:iam::xxxxxxxxxxx:role/NitroEnclave-Demo"
            },
            "Action": [
                "kms:GenerateRandom",
                "kms:GenerateDataKey"
            ],
            "Resource": "*",
            "Condition": {
              "StringNotEqualsIgnoreCase": {
                "kms:RecipientAttestation:ImageSha384":"17b041934b2255ae55b07433012e4d41999feda85eb839970645458a35f8571360f32ca68b5178dca8bdecf9fd37c010",
                "kms:RecipientAttestation:PCR0":"17b041934b2255ae55b07433012e4d41999feda85eb839970645458a35f8571360f32ca68b5178dca8bdecf9fd37c010",
                "kms:RecipientAttestation:PCR1":"c35e620586e91ed40ca5ce360eedf77ba673719135951e293121cb3931220b00f87b5a15e94e25c01fecd08fc9139342", 
                "kms:RecipientAttestation:PCR2":"1fc61c8c21fb3ec93ae854341f5b9adc1e7bbc2eb437cc308e5fb2f4787393fe500fa4c894422a92d79eb3ce172c1a8e"
              }
            }
        },
        {
            "Sid": "Only Allow NitroEnclaveDemo-2",
            "Effect": "Deny",
            "Principal": {
                "AWS": "arn:aws:iam::xxxxxxxxxxx:role/NitroEnclave-Demo"
            },
            "Action": [
                "kms:Decrypt"
            ],
            "Resource": "*",
            "Condition": {
              "StringNotEqualsIgnoreCase": {
                "kms:RecipientAttestation:ImageSha384":"810257e9bd2ecad2181fcff508c7547ef0f3c1d446628f5465c955c4f2a2d3cfac9198919999614ffbed8e0b18c6c084",
                "kms:RecipientAttestation:PCR0":"810257e9bd2ecad2181fcff508c7547ef0f3c1d446628f5465c955c4f2a2d3cfac9198919999614ffbed8e0b18c6c084",
                "kms:RecipientAttestation:PCR1":"c35e620586e91ed40ca5ce360eedf77ba673719135951e293121cb3931220b00f87b5a15e94e25c01fecd08fc9139342", 
                "kms:RecipientAttestation:PCR2":"72457ef34f66f041996e7077f55604f0f73b1d2e3fad54881308d38da6d22bc8cd2084ab3b8810b22da629a24eef94e6"
              }
            }
        },
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave9.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave9.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 在 EC2 上测试直接用 CLI 访问 KMS，提示请求被拒绝，确认密钥策略权限已生效&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;
[ec2-user@ip-172-31-33-19 ~]$ aws kms generate-data-key --key-id alias/NitroEnclaveDemo --number-of-bytes 32 --region ap-northeast-1

An error occurred (AccessDeniedException) when calling the GenerateDataKey operation: User: arn:aws:sts::xxxxxxxxxx:assumed-role/NitroEnclave-Demo/i-0e4fc2c648b901c7e is not authorized to perform: kms:GenerateDataKey on resource: arn:aws:kms:ap-northeast-1:xxxxxxxxxx:key/6390f2e0-86d6-46cb-8478-37dcfa6aa2dc with an explicit deny
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;分别在两台 EC2 上执行以下命令，终止前面步骤启动的 Enclave&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;nitro-cli terminate-enclave --enclave-id $(nitro-cli describe-enclaves | jq -r ".[0].EnclaveID")&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;然后在两台 EC2 上重新启动 Enclave，不添加 –debug-mode 参数&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;## NitroEnclaveDemo-1
[ec2-user@ip-172-31-33-19 GenerateToken]$ nitro-cli run-enclave --cpu-count 2 --memory 2900 --enclave-cid 10 --eif-path GenerateToken-demo.eif
Start allocating memory...
Started enclave with enclave-cid: 10, memory: 3072 MiB, cpu-ids: [1, 3]
{
  "EnclaveID": "i-0e4fc2c648b901c7e-enc17b908ba803d724",
  "ProcessID": 7565,
  "EnclaveCID": 10,
  "NumberOfCPUs": 2,
  "CPUIDs": [
    1,
    3
  ],
  "MemoryMiB": 3072
}


## NitroEnclaveDemo-2
[ec2-user@ip-172-31-36-174 SignVerify]$ nitro-cli run-enclave --cpu-count 2 --memory 2900 --enclave-cid 10 --eif-path SignVerify-demo.eif
Start allocating memory...
Started enclave with enclave-cid: 10, memory: 3072 MiB, cpu-ids: [1, 3]
{
  "EnclaveID": "i-0558cbee6ea7a393c-enc17b908f0730bcb2",
  "ProcessID": 7533,
  "EnclaveCID": 10,
  "NumberOfCPUs": 2,
  "CPUIDs": [
    1,
    3
  ],
  "MemoryMiB": 3072
}
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;然后分别在两台 EC2 的父实例上，运行client.py，确认代码能正常运行。&lt;/p&gt; 
&lt;div class="hide-language"&gt; 
 &lt;pre&gt;&lt;code class="lang-python"&gt;## NitroEnclaveDemo-1
[ec2-user@ip-172-31-33-19 GenerateToken]$ python3 client.py alias/NitroEnclaveDemo u010
{"userid": "u010", "encrypted_privatekey": "h08szIyVaTrjH1TF95+aXooPKC/QZwGRDaZv7Cp/LmFG2FQumbZR49NrnsOYBsS+VxsvPtSlBE2s\nnEYQLMI9lQ==\n", "publickey": "9552c9f2c51be3b7143e3cfe9c71f7dcac028d368530ffbbdb34512092611e4996e9e1bcab27e4a879ff630629d7f930d2db84c295e97334d1f3335d31e7ac87", "encrypted_datakey": "AQIBAHhVM1N8G00xz9DVe3FbnRAxaxNCkCaRYV6/wLYxbwj04QFKhpZ//ap2EgINgILddtu0AAAAdjB0BgkqhkiG9w0BBwagZzBlAgEAMGAGCSqGSIb3DQEHATAeBglghkgBZQMEAS4wEQQMScLI1DYM6y6hd0d4AgEQgDO2pbbcrEEd+trVcqiqkFdlhXY/ZVEMoRqRsQAUMdJq24zwGgl6UYOjLCviBHs2wI8jC5A="}
Write User Token to DynamoDB Successfully
[ec2-user@ip-172-31-33-19 GenerateToken]$

## NitroEnclaveDemo-2
[ec2-user@ip-172-31-36-174 SignVerify]$ python3 client.py u010 'Hello World'
Signed Message: b27a5c527e218774b316f674eae537ce88b3f986b7f5df583906b1c9a9ba9bb00d2975fe4a065d5a1e74bb6947fe11c8fc90d3ac389be638b2745431de04ebd9
Signed message verified by public key: True
[ec2-user@ip-172-31-36-174 SignVerify]$
&lt;/code&gt;&lt;/pre&gt; 
&lt;/div&gt; 
&lt;p&gt;在 CloudTrail 中，查看 KMS API 的请求记录，在来自 Enclave 的请求记录中，将会存在额外的 Attestation 数据。&lt;/p&gt; 
&lt;p&gt;来自第一台 Enclave 请求 kms:GenerateDataKey 的 CloudTrail：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave10.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave10.png" width="624" height="78"&gt;&lt;/a&gt;&lt;br&gt; 来自第二台 Enclave 请求 kms:Decrypt 的 CloudTrail：&lt;/p&gt; 
&lt;p&gt;&lt;a href="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave11.jpg"&gt;&lt;img class="aligncenter size-medium" src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/build-a-secure-and-trusted-execution-environment-based-on-nitro-enclave11.png" width="624" height="78"&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;总结&lt;/h2&gt; 
&lt;p&gt;Nitro Enclave 使用户可以在 亚马逊云科技上，简便，安全地运行隔离的可信计算环境，用于处理私钥，PII等敏感数据。另外 Nitro Enclave 不需要强制绑定 CPU 芯片，支持 Intel，AMD 芯片的计算实例，没有任何额外费用，具备更好的灵活性和成本效益，且与云原生的安全服务 KMS，ACM 直接集成，为用户提供更好的使用体验和安全性保障。&lt;/p&gt; 
&lt;h2&gt;本篇作者&lt;/h2&gt; 
&lt;footer&gt; 
 &lt;div class="blog-author-box"&gt; 
  &lt;div class="blog-author-image"&gt;
   &lt;img src="https://s3.cn-north-1.amazonaws.com.cn/awschinablog/Author/hxh.jpg" width="125"&gt;
  &lt;/div&gt; 
  &lt;h3 class="lb-h4"&gt;胡新华&lt;/h3&gt; 
  &lt;p&gt;AWS解决方案架构师，负责金融行业基于AWS的云计算架构咨询和设计。加入AWS之前就职于IBM，在数据中心IT基础架构相关的解决方案设计和交付方面，具有十多年经验。&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/footer&gt;</content:encoded>
										</item>
	</channel>
</rss>